!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=22)}([function(e,t,n){e.exports=n(25)()},function(e,t,n){"use strict";e.exports=n(24)},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,a,i,u],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n(0),a=n.n(o),i=a.a.shape({trySubscribe:a.a.func.isRequired,tryUnsubscribe:a.a.func.isRequired,notifyNestedSubs:a.a.func.isRequired,isSubscribed:a.a.func.isRequired}),u=a.a.shape({subscribe:a.a.func.isRequired,dispatch:a.a.func.isRequired,getState:a.a.func.isRequired});function l(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return a[t]=n.store,a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:u.isRequired,children:a.a.element.isRequired},o.childContextTypes=((e={})[t]=u.isRequired,e[n]=i,e),o}var c=l(),s=n(10),f=n.n(s),p=n(2),d=n.n(p);var m=null,h={notify:function(){}};var y=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=h}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=function(){var e=[],t=[];return{clear:function(){t=m,e=m},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==m&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}}())},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=h)},e}(),v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var b=0,E={};function g(){}function _(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=o.getDisplayName,l=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,c=o.methodName,s=void 0===c?"connectAdvanced":c,p=o.renderCountProp,m=void 0===p?void 0:p,h=o.shouldHandleStateChanges,_=void 0===h||h,w=o.storeKey,T=void 0===w?"store":w,O=o.withRef,x=void 0!==O&&O,P=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),C=T+"Subscription",S=b++,R=((t={})[T]=u,t[C]=i,t),k=((n={})[C]=i,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+s+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=l(n),a=v({},P,{getDisplayName:l,methodName:s,renderCountProp:m,shouldHandleStateChanges:_,storeKey:T,withRef:x,displayName:o,wrappedComponentName:n,WrappedComponent:t}),i=function(n){function i(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=S,r.state={},r.renderCount=0,r.store=e[T]||t[T],r.propsMode=Boolean(e[T]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+T+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+T+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,n),i.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[C]=t||this.context[C],e},i.prototype.componentDidMount=function(){_&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},i.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},i.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},i.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=g,this.store=null,this.selector.run=g,this.selector.shouldComponentUpdate=!1},i.prototype.getWrappedInstance=function(){return d()(x,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+s+"() call."),this.wrappedInstance},i.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},i.prototype.initSelector=function(){var t=e(this.store.dispatch,a);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},i.prototype.initSubscription=function(){if(_){var e=(this.propsMode?this.props:this.context)[C];this.subscription=new y(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},i.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(E)):this.notifyNestedSubs()},i.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},i.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},i.prototype.addExtraProps=function(e){if(!(x||m||this.propsMode&&this.subscription))return e;var t=v({},e);return x&&(t.ref=this.setWrappedInstance),m&&(t[m]=this.renderCount++),this.propsMode&&this.subscription&&(t[C]=this.subscription),t},i.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},i}(r.Component);return i.WrappedComponent=t,i.displayName=o,i.childContextTypes=k,i.contextTypes=R,i.propTypes=R,f()(i,t)}}var w=Object.prototype.hasOwnProperty;function T(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function O(e,t){if(T(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!w.call(t,n[o])||!T(e[n[o]],t[n[o]]))return!1;return!0}var x=n(7),P=n(20),C="object"==typeof self&&self&&self.Object===Object&&self,S=(P.a||C||Function("return this")()).Symbol,R=Object.prototype;R.hasOwnProperty,R.toString,S&&S.toStringTag;Object.prototype.toString;S&&S.toStringTag;Object.getPrototypeOf,Object;var k=Function.prototype,A=Object.prototype,N=k.toString;A.hasOwnProperty,N.call(Object);function j(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function D(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function M(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=D(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=D(o),o=r(t,n)),o},r}}var I=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:j(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?j(function(t){return Object(x.bindActionCreators)(e,t)}):void 0}];var U=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:j(function(){return{}})}],V=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function L(e,t,n){return V({},n,e,t)}var B=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,a=!1,i=void 0;return function(t,n,u){var l=e(t,n,u);return a?r&&o(l,i)||(i=l):(a=!0,i=l),i}}}(e):void 0},function(e){return e?void 0:function(){return L}}];function F(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function W(e,t,n,r,o){var a=o.areStatesEqual,i=o.areOwnPropsEqual,u=o.areStatePropsEqual,l=!1,c=void 0,s=void 0,f=void 0,p=void 0,d=void 0;function m(o,l){var m=!i(l,s),h=!a(o,c);return c=o,s=l,m&&h?(f=e(c,s),t.dependsOnOwnProps&&(p=t(r,s)),d=n(f,p,s)):m?(e.dependsOnOwnProps&&(f=e(c,s)),t.dependsOnOwnProps&&(p=t(r,s)),d=n(f,p,s)):h?function(){var t=e(c,s),r=!u(t,f);return f=t,r&&(d=n(f,p,s)),d}():d}return function(o,a){return l?m(o,a):function(o,a){return f=e(c=o,s=a),p=t(r,s),d=n(f,p,s),l=!0,d}(o,a)}}function z(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),u=r(e,a),l=o(e,a);return(a.pure?W:F)(i,u,l,e,a)}var H=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function q(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function G(e,t){return e===t}var Y=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?_:t,r=e.mapStateToPropsFactories,o=void 0===r?U:r,a=e.mapDispatchToPropsFactories,i=void 0===a?I:a,u=e.mergePropsFactories,l=void 0===u?B:u,c=e.selectorFactory,s=void 0===c?z:c;return function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=a.pure,c=void 0===u||u,f=a.areStatesEqual,p=void 0===f?G:f,d=a.areOwnPropsEqual,m=void 0===d?O:d,h=a.areStatePropsEqual,y=void 0===h?O:h,v=a.areMergedPropsEqual,b=void 0===v?O:v,E=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),g=q(e,o,"mapStateToProps"),_=q(t,i,"mapDispatchToProps"),w=q(r,l,"mergeProps");return n(s,H({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:g,initMapDispatchToProps:_,initMergeProps:w,pure:c,areStatesEqual:p,areOwnPropsEqual:m,areStatePropsEqual:y,areMergedPropsEqual:b},E))}}();n.d(t,"Provider",function(){return c}),n.d(t,"createProvider",function(){return l}),n.d(t,"connectAdvanced",function(){return _}),n.d(t,"connect",function(){return Y})},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setToCurrentArmor=t.setToCurrentSpell=t.setToCurrentRanged=t.setToCurrentMelee=t.removeVehicle=t.removeSpell=t.removeSkill=t.removeQuality=t.removePower=t.removeGear=t.removeCyberdeck=t.removeContact=t.removeAugmentation=t.removeArmor=t.removeRangedWeapon=t.removeMeleeWeapon=t.addVehicle=t.addSpell=t.addSkill=t.addQuality=t.addPower=t.addGear=t.addCyberdeck=t.addContact=t.addAugmentation=t.addArmor=t.addRangedWeapon=t.addMeleeWeapon=t.boxChange=t.fetchProductsError=t.fetchProductsSuccess=t.fetchProductsBegin=t.retrieveAndSetPersonal=t.retrieveAndSetApp=t.retrieveAndSetAddRemove=t.updateDatabaseEntry=t.createDatabaseEntry=t.loadState=t.savePersonal=t.submitText=void 0,t.retrieveDatabaseEntry=function(){return console.log("INITIATING RETRIEVE DATABASE ENTRY ACTION"),function(e){return e(l()),(0,o.default)("/retrieveFromDatabase",{method:"GET",credentials:"same-origin",headers:{"Content-Type":"application/json",Accept:"application/json"}}).then(s).then(function(e){return e.json()}).then(function(t){e(u(t[0].personalData)),e(i(t[0].app)),e(a(t[0].addRemove))}).catch(function(t){return e(c(t))})}};var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(8)),o=function(e){return e&&e.__esModule?e:{default:e}}(n(31));t.submitText=function(e){return{type:r.SUBMIT_TEXT,payload:e}},t.savePersonal=function(e){return{type:r.SAVE_PERSONAL,payload:e}},t.loadState=function(e){return{type:r.LOAD_STATE,payload:e}},t.createDatabaseEntry=function(e){return{type:r.CREATE_DATABASE_ENTRY,payload:e}},t.updateDatabaseEntry=function(e){return{type:r.UPDATE_DATABASE_ENTRY,payload:e}};var a=t.retrieveAndSetAddRemove=function(e){return{type:r.RETRIEVE_AND_SET_ADDREMOVE,payload:e}},i=t.retrieveAndSetApp=function(e){return{type:r.RETRIEVE_AND_SET_APP,payload:e}},u=t.retrieveAndSetPersonal=function(e){return{type:r.RETRIEVE_AND_SET_PERSONAL,payload:e}},l=t.fetchProductsBegin=function(){return{type:r.FETCH_PRODUCTS_BEGIN}},c=(t.fetchProductsSuccess=function(e){return{type:r.FETCH_PRODUCTS_SUCCESS,payload:e}},t.fetchProductsError=function(e){return{type:r.FETCH_PRODUCTS_FAILURE,payload:e}});function s(e){if(!e.ok)throw Error(e.statusText);return e}t.boxChange=function(e){return{type:r.BOX_CHANGE,payload:e}},t.addMeleeWeapon=function(e){return{type:r.ADD_MELEEWEAPON,payload:e}},t.addRangedWeapon=function(e){return{type:r.ADD_RANGEDWEAPON,payload:e}},t.addArmor=function(e){return{type:r.ADD_ARMOR,payload:e}},t.addAugmentation=function(e){return{type:r.ADD_AUGMENTATION,payload:e}},t.addContact=function(e){return{type:r.ADD_CONTACT,payload:e}},t.addCyberdeck=function(e){return{type:r.ADD_CYBERDECK,payload:e}},t.addGear=function(e){return{type:r.ADD_GEAR,payload:e}},t.addPower=function(e){return{type:r.ADD_POWER,payload:e}},t.addQuality=function(e){return{type:r.ADD_QUALITY,payload:e}},t.addSkill=function(e){return{type:r.ADD_SKILL,payload:e}},t.addSpell=function(e){return{type:r.ADD_SPELL,payload:e}},t.addVehicle=function(e){return{type:r.ADD_VEHICLE,payload:e}},t.removeMeleeWeapon=function(e){return{type:r.REMOVE_MELEEWEAPON,payload:e}},t.removeRangedWeapon=function(e){return{type:r.REMOVE_RANGEDWEAPON,payload:e}},t.removeArmor=function(e){return{type:r.REMOVE_ARMOR,payload:e}},t.removeAugmentation=function(e){return{type:r.REMOVE_AUGMENTATION,payload:e}},t.removeContact=function(e){return{type:r.REMOVE_CONTACT,payload:e}},t.removeCyberdeck=function(e){return{type:r.REMOVE_CYBERDECK,payload:e}},t.removeGear=function(e){return{type:r.REMOVE_GEAR,payload:e}},t.removePower=function(e){return{type:r.REMOVE_POWER,payload:e}},t.removeQuality=function(e){return{type:r.REMOVE_QUALITY,payload:e}},t.removeSkill=function(e){return{type:r.REMOVE_SKILL,payload:e}},t.removeSpell=function(e){return{type:r.REMOVE_SPELL,payload:e}},t.removeVehicle=function(e){return{type:r.REMOVE_VEHICLE,payload:e}},t.setToCurrentMelee=function(e){return{type:r.SET_TO_CURRENT_MELEE,payload:e}},t.setToCurrentRanged=function(e){return{type:r.SET_TO_CURRENT_RANGED,payload:e}},t.setToCurrentSpell=function(e){return{type:r.SET_TO_CURRENT_SPELL,payload:e}},t.setToCurrentArmor=function(e){return{type:r.SET_TO_CURRENT_ARMOR,payload:e}}},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return l}),n.d(t,"combineReducers",function(){return s}),n.d(t,"bindActionCreators",function(){return p}),n.d(t,"applyMiddleware",function(){return m}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(12),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function u(e){if("object"!==(void 0===e?"undefined":a(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,n){var i;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(l)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,s=t,f=[],p=f,d=!1;function m(){p===f&&(p=f.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function y(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return m(),p.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,m();var n=p.indexOf(e);p.splice(n,1)}}}function v(e){if(!u(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,s=c(s,e)}finally{d=!1}for(var t=f=p,n=0;n<t.length;n++){(0,t[n])()}return e}return v({type:o.INIT}),(i={dispatch:v,subscribe:y,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,v({type:o.REPLACE})}})[r.a]=function(){var e,t=y;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":a(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},i}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var a=t[r];0,"function"==typeof e[a]&&(n[a]=e[a])}var i=Object.keys(n);var u=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){u=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(u)throw u;for(var r=!1,o={},a=0;a<i.length;a++){var l=i[a],s=n[l],f=e[l],p=s(f,t);if(void 0===p){var d=c(l,t);throw new Error(d)}o[l]=p,r=r||p!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":a(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":a(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],u=e[i];"function"==typeof u&&(r[i]=f(u,t))}return r}function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function m(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var a=e.apply(void 0,r),u=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},l={getState:a.getState,dispatch:function(){return u.apply(void 0,arguments)}},c=t.map(function(e){return e(l)});return u=d.apply(void 0,c)(a.dispatch),i({},a,{dispatch:u})}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.SUBMIT_TEXT="SUBMIT_TEXT",t.SAVE_PERSONAL="SAVE_PERSONAL",t.UPDATE_DATABASE_ENTRY="UPDATE_DATABASE_ENTRY",t.LOAD_STATE="LOAD_STATE",t.CREATE_DATABASE_ENTRY="CREATE_DATABASE_ENTRY",t.RETRIEVE_DATABASE_ENTRY="RETRIEVE_DATABASE_ENTRY",t.RETRIEVE_FROM_DATABASE="RETRIEVE_FROM_DATABASE",t.RETRIEVE_AND_SET_ADDREMOVE="RETRIEVE_AND_SET_ADDREMOVE",t.RETRIEVE_AND_SET_APP="RETRIEVE_AND_SET_APP",t.RETRIEVE_AND_SET_PERSONAL="RETRIEVE_AND_SET_PERSONAL",t.FETCH_PRODUCTS_BEGIN="FETCH_PRODUCTS_BEGIN",t.FETCH_PRODUCTS_SUCCESS="FETCH_PRODUCTS_SUCCESS",t.FETCH_PRODUCTS_FAILURE="FETCH_PRODUCTS_FAILURE",t.BOX_CHANGE="BOX_CHANGE",t.ADD_MELEEWEAPON="ADD_MELEEWEAPON",t.ADD_RANGEDWEAPON="ADD_RANGEDWEAPON",t.ADD_ARMOR="ADD_ARMOR",t.ADD_AUGMENTATION="ADD_AUGMENTATION",t.ADD_CONTACT="ADD_CONTACT",t.ADD_CYBERDECK="ADD_CYBERDECK",t.ADD_GEAR="ADD_GEAR",t.ADD_POWER="ADD_POWER",t.ADD_QUALITY="ADD_QUALITY",t.ADD_SKILL="ADD_SKILL",t.ADD_SPELL="ADD_SPELL",t.ADD_VEHICLE="ADD_VEHICLE",t.REMOVE_MELEEWEAPON="REMOVE_MELEEWEAPON",t.REMOVE_RANGEDWEAPON="REMOVE_RANGEDWEAPON",t.REMOVE_ARMOR="REMOVE_ARMOR",t.REMOVE_AUGMENTATION="REMOVE_AUGMENTATION",t.REMOVE_CONTACT="REMOVE_CONTACT",t.REMOVE_CYBERDECK="REMOVE_CYBERDECK",t.REMOVE_GEAR="REMOVE_GEAR",t.REMOVE_POWER="REMOVE_POWER",t.REMOVE_QUALITY="REMOVE_QUALITY",t.REMOVE_SKILL="REMOVE_SKILL",t.REMOVE_SPELL="REMOVE_SPELL",t.REMOVE_VEHICLE="REMOVE_VEHICLE",t.SET_TO_CURRENT_MELEE="SET_TO_CURRENT_MELEE",t.SET_TO_CURRENT_RANGED="SET_TO_CURRENT_RANGED",t.SET_TO_CURRENT_SPELL="SET_TO_CURRENT_SPELL",t.SET_TO_CURRENT_ARMOR="SET_TO_CURRENT_ARMOR",t.ITEM_HAS_ERRORED="ITEM_HAS_ERRORED",t.ITEM_IS_LOADING="ITEM_IS_LOADING",t.ITEM_FETCH_SUCCESS="ITEM_FETCH_SUCCESS"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.boxClass},e.name,":",r.default.createElement("input",{id:e.storeVal,size:e.boxSize,value:e.curVal,onChange:function(){e.savePersonal(),console.log("SAVE PERSONAL INVOKED")}}))}},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a=Object.defineProperty,i=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,s=c&&c(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(s){var p=c(n);p&&p!==s&&e(t,p,f)}var d=i(n);u&&(d=d.concat(u(n)));for(var m=0;m<d.length;++m){var h=d[m];if(!(r[h]||o[h]||f&&f[h])){var y=l(n,h);try{a(t,h,y)}catch(e){}}}return t}return t}},function(e,t,n){var r=n(28);e.exports=m,e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t))},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,u="",l=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(i,d),i=d+f.length,p)u+=p[1];else{var m=e[i],h=n[2],y=n[3],v=n[4],b=n[5],E=n[6],g=n[7];u&&(r.push(u),u="");var _=null!=h&&null!=m&&m!==h,w="+"===E||"*"===E,T="?"===E||"*"===E,O=n[2]||l,x=v||b;r.push({name:y||a++,prefix:h||"",delimiter:O,optional:T,repeat:w,partial:_,asterisk:!!g,pattern:x?s(x):g?".*":"[^"+c(O)+"]+?"})}}return i<e.length&&(u+=e.substr(i)),u&&r.push(u),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var a="",l=n||{},c=(o||{}).pretty?i:encodeURIComponent,s=0;s<e.length;s++){var f=e[s];if("string"!=typeof f){var p,d=l[f.name];if(null==d){if(f.optional){f.partial&&(a+=f.prefix);continue}throw new TypeError('Expected "'+f.name+'" to be defined')}if(r(d)){if(!f.repeat)throw new TypeError('Expected "'+f.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(f.optional)continue;throw new TypeError('Expected "'+f.name+'" to not be empty')}for(var m=0;m<d.length;m++){if(p=c(d[m]),!t[s].test(p))throw new TypeError('Expected all "'+f.name+'" to match "'+f.pattern+'", but received `'+JSON.stringify(p)+"`");a+=(0===m?f.prefix:f.delimiter)+p}}else{if(p=f.asterisk?u(d):c(d),!t[s].test(p))throw new TypeError('Expected "'+f.name+'" to match "'+f.pattern+'", but received "'+p+'"');a+=f.prefix+p}}else a+=f}return a}}function c(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function f(e,t){return e.keys=t,e}function p(e){return e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",u=0;u<e.length;u++){var l=e[u];if("string"==typeof l)i+=c(l);else{var s=c(l.prefix),d="(?:"+l.pattern+")";t.push(l),l.repeat&&(d+="(?:"+s+d+")*"),i+=d=l.optional?l.partial?s+"("+d+")?":"(?:"+s+"("+d+"))?":s+"("+d+")"}}var m=c(n.delimiter||"/"),h=i.slice(-m.length)===m;return o||(i=(h?i.slice(0,-m.length):i)+"(?:"+m+"(?=$))?"),i+=a?"$":o&&h?"":"(?="+m+"|$)",f(new RegExp("^"+i,p(n)),t)}function m(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return f(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(m(e[o],t,n).source);return f(new RegExp("(?:"+r.join("|")+")",p(n)),t)}(e,t,n):function(e,t,n){return d(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";(function(e,r){var o,a=n(21);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(17),n(27)(e))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(u[c]=n[c]);if(r){i=r(n);for(var s=0;s<i.length;s++)a.call(n,i[s])&&(u[i[s]]=n[i[s]])}}return u}},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,u,l){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,o,a,i,u,l],f=0;(c=new Error(t.replace(/%s/g,function(){return s[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("div",null,r.default.createElement("b",null,"Weapon:"),r.default.createElement("input",{defaultValue:e.weapon}),r.default.createElement("b",null,"Damage:"),r.default.createElement("input",{defaultValue:e.damage}),r.default.createElement("b",null,"Accuracy:"),r.default.createElement("input",{defaultValue:e.accuracy}),r.default.createElement("b",null,"AP:"),r.default.createElement("input",{defaultValue:e.ap}),r.default.createElement("b",null,"Mode:"),r.default.createElement("input",{defaultValue:e.mode}),r.default.createElement("b",null,"RC:"),r.default.createElement("input",{defaultValue:e.rc}),r.default.createElement("b",null,"Ammo:"),r.default.createElement("input",{defaultValue:e.ammo}),r.default.createElement("button",{onClick:function(){e.remove(e.ind)}},"remove"),r.default.createElement("button",{onClick:function(){e.setToCurrentRanged(e.ind)}},"Set to current"))}},function(e,t,n){"use strict";n.r(t);var r=n(4),o=n.n(r),a=n(1),i=n.n(a),u=n(0),l=n.n(u),c=n(6),s=n.n(c),f=n(2),p=n.n(f);function d(e){return"/"===e.charAt(0)}function m(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&d(e),a=t&&d(t),i=o||a;if(e&&d(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var u=void 0;if(r.length){var l=r[r.length-1];u="."===l||".."===l||""===l}else u=!1;for(var c=0,s=r.length;s>=0;s--){var f=r[s];"."===f?m(r,s):".."===f?(m(r,s),c++):c&&(m(r,s),c--)}if(!i)for(;c--;c)r.unshift("..");!i||""===r[0]||r[0]&&d(r[0])||r.unshift("");var p=r.join("/");return u&&"/"!==p.substr(-1)&&(p+="/"),p},y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var v=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":y(t);if(r!==(void 0===n?"undefined":y(n)))return!1;if("object"===r){var o=t.valueOf(),a=n.valueOf();if(o!==t||a!==n)return e(o,a);var i=Object.keys(t),u=Object.keys(n);return i.length===u.length&&i.every(function(r){return e(t[r],n[r])})}return!1},b=function(e){return"/"===e.charAt(0)?e:"/"+e},E=function(e){return"/"===e.charAt(0)?e.substr(1):e},g=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},_=function(e,t){return g(e,t)?e.substr(t.length):e},w=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},T=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},x=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=O({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=h(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},P=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&v(e.state,t.state)},C=function(){var e=null,t=[];return{setPrompt:function(t){return s()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):(s()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},S=!("undefined"==typeof window||!window.document||!window.document.createElement),R=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},k=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},A=function(e,t){return t(window.confirm(e))},N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},D=function(){try{return window.history.state||{}}catch(e){return{}}},M=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(S,"Browser history needs a DOM");var t=window.history,n=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),r=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e.forceRefresh,a=void 0!==o&&o,i=e.getUserConfirmation,u=void 0===i?A:i,l=e.keyLength,c=void 0===l?6:l,f=e.basename?w(b(e.basename)):"",d=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return s()(!f||g(a,f),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+f+'".'),f&&(a=_(a,f)),x(a,r,n)},m=function(){return Math.random().toString(36).substr(2,c)},h=C(),y=function(e){j(z,e),z.length=t.length,h.notifyListeners(z.location,z.action)},v=function(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||P(d(e.state))},E=function(){P(d(D()))},O=!1,P=function(e){O?(O=!1,y()):h.confirmTransitionTo(e,"POP",u,function(t){t?y({action:"POP",location:e}):M(e)})},M=function(e){var t=z.location,n=U.indexOf(t.key);-1===n&&(n=0);var r=U.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(O=!0,L(o))},I=d(D()),U=[I.key],V=function(e){return f+T(e)},L=function(e){t.go(e)},B=0,F=function(e){1===(B+=e)?(R(window,"popstate",v),r&&R(window,"hashchange",E)):0===B&&(k(window,"popstate",v),r&&k(window,"hashchange",E))},W=!1,z={length:t.length,action:"POP",location:I,createHref:V,push:function(e,r){s()(!("object"===(void 0===e?"undefined":N(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=x(e,r,m(),z.location);h.confirmTransitionTo(o,"PUSH",u,function(e){if(e){var r=V(o),i=o.key,u=o.state;if(n)if(t.pushState({key:i,state:u},null,r),a)window.location.href=r;else{var l=U.indexOf(z.location.key),c=U.slice(0,-1===l?0:l+1);c.push(o.key),U=c,y({action:"PUSH",location:o})}else s()(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,r){s()(!("object"===(void 0===e?"undefined":N(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=x(e,r,m(),z.location);h.confirmTransitionTo(o,"REPLACE",u,function(e){if(e){var r=V(o),i=o.key,u=o.state;if(n)if(t.replaceState({key:i,state:u},null,r),a)window.location.replace(r);else{var l=U.indexOf(z.location.key);-1!==l&&(U[l]=o.key),y({action:"REPLACE",location:o})}else s()(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:L,goBack:function(){return L(-1)},goForward:function(){return L(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=h.setPrompt(e);return W||(F(1),W=!0),function(){return W&&(W=!1,F(-1)),t()}},listen:function(e){var t=h.appendListener(e);return F(1),function(){F(-1),t()}}};return z},I=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},U={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+E(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:E,decodePath:b},slash:{encodePath:b,decodePath:b}},V=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},L=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)},B=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(S,"Hash history needs a DOM");var t=window.history,n=-1===window.navigator.userAgent.indexOf("Firefox"),r=e.getUserConfirmation,o=void 0===r?A:r,a=e.hashType,i=void 0===a?"slash":a,u=e.basename?w(b(e.basename)):"",l=U[i],c=l.encodePath,f=l.decodePath,d=function(){var e=f(V());return s()(!u||g(e,u),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+u+'".'),u&&(e=_(e,u)),x(e)},m=C(),h=function(e){I(q,e),q.length=t.length,m.notifyListeners(q.location,q.action)},y=!1,v=null,E=function(){var e=V(),t=c(e);if(e!==t)L(t);else{var n=d(),r=q.location;if(!y&&P(r,n))return;if(v===T(n))return;v=null,O(n)}},O=function(e){y?(y=!1,h()):m.confirmTransitionTo(e,"POP",o,function(t){t?h({action:"POP",location:e}):N(e)})},N=function(e){var t=q.location,n=B.lastIndexOf(T(t));-1===n&&(n=0);var r=B.lastIndexOf(T(e));-1===r&&(r=0);var o=n-r;o&&(y=!0,F(o))},j=V(),D=c(j);j!==D&&L(D);var M=d(),B=[T(M)],F=function(e){s()(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},W=0,z=function(e){1===(W+=e)?R(window,"hashchange",E):0===W&&k(window,"hashchange",E)},H=!1,q={length:t.length,action:"POP",location:M,createHref:function(e){return"#"+c(u+T(e))},push:function(e,t){s()(void 0===t,"Hash history cannot push state; it is ignored");var n=x(e,void 0,void 0,q.location);m.confirmTransitionTo(n,"PUSH",o,function(e){if(e){var t=T(n),r=c(u+t);if(V()!==r){v=t,function(e){window.location.hash=e}(r);var o=B.lastIndexOf(T(q.location)),a=B.slice(0,-1===o?0:o+1);a.push(t),B=a,h({action:"PUSH",location:n})}else s()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),h()}})},replace:function(e,t){s()(void 0===t,"Hash history cannot replace state; it is ignored");var n=x(e,void 0,void 0,q.location);m.confirmTransitionTo(n,"REPLACE",o,function(e){if(e){var t=T(n),r=c(u+t);V()!==r&&(v=t,L(r));var o=B.indexOf(T(q.location));-1!==o&&(B[o]=t),h({action:"REPLACE",location:n})}})},go:F,goBack:function(){return F(-1)},goForward:function(){return F(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=m.setPrompt(e);return H||(z(1),H=!0),function(){return H&&(H=!1,z(-1)),t()}},listen:function(e){var t=m.appendListener(e);return z(1),function(){z(-1),t()}}};return q},F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},W=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},z=function(e,t,n){return Math.min(Math.max(e,t),n)},H=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,o=e.initialIndex,a=void 0===o?0:o,i=e.keyLength,u=void 0===i?6:i,l=C(),c=function(e){W(y,e),y.length=y.entries.length,l.notifyListeners(y.location,y.action)},f=function(){return Math.random().toString(36).substr(2,u)},p=z(a,0,r.length-1),d=r.map(function(e){return x(e,void 0,"string"==typeof e?f():e.key||f())}),m=T,h=function(e){var n=z(y.index+e,0,y.entries.length-1),r=y.entries[n];l.confirmTransitionTo(r,"POP",t,function(e){e?c({action:"POP",location:r,index:n}):c()})},y={length:d.length,action:"POP",location:d[p],index:p,entries:d,createHref:m,push:function(e,n){s()(!("object"===(void 0===e?"undefined":F(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=x(e,n,f(),y.location);l.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=y.index+1,n=y.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),c({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){s()(!("object"===(void 0===e?"undefined":F(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=x(e,n,f(),y.location);l.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(y.entries[y.index]=r,c({action:"REPLACE",location:r}))})},go:h,goBack:function(){return h(-1)},goForward:function(){return h(1)},canGo:function(e){var t=y.index+e;return t>=0&&t<y.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return y},q=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function G(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Y=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=G(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props.history.location.pathname)},G(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:q({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;p()(null==n||1===i.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?i.a.Children.only(e):null},t}(i.a.Component);Y.propTypes={history:l.a.object.isRequired,children:l.a.node},Y.contextTypes={router:l.a.object},Y.childContextTypes={router:l.a.object.isRequired};var K=Y,$=K;function Q(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var X=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=Q(this,e.call.apply(e,[this].concat(a))),r.history=M(r.props),Q(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement($,{history:this.history,children:this.props.children})},t}(i.a.Component);X.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var J=X;function Z(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ee=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=Z(this,e.call.apply(e,[this].concat(a))),r.history=B(r.props),Z(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement($,{history:this.history,children:this.props.children})},t}(i.a.Component);ee.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var te=ee,ne=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function re(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var oe=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},ae=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=re(this,e.call.apply(e,[this].concat(a))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!oe(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,a=n.to;o?t.replace(a):t.push(a)}},re(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);p()(this.context.router,"You should not use <Link> outside a <Router>"),p()(void 0!==t,'You must specify the "to" property');var o=this.context.router.history,a="string"==typeof t?x(t,null,null,o.location):t,u=o.createHref(a);return i.a.createElement("a",ne({},r,{onClick:this.handleClick,href:u,ref:n}))},t}(i.a.Component);ae.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},ae.defaultProps={replace:!1},ae.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var ie=ae;function ue(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var le=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=ue(this,e.call.apply(e,[this].concat(a))),r.history=H(r.props),ue(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(K,{history:this.history,children:this.props.children})},t}(i.a.Component);le.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var ce=le,se=n(11),fe=n.n(se),pe={},de=0,me=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,o=r.path,a=r.exact,i=void 0!==a&&a,u=r.strict,l=void 0!==u&&u,c=r.sensitive,s=void 0!==c&&c;if(null==o)return n;var f=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=pe[n]||(pe[n]={});if(r[e])return r[e];var o=[],a={re:fe()(e,o,t),keys:o};return de<1e4&&(r[e]=a,de++),a}(o,{end:i,strict:l,sensitive:s}),p=f.re,d=f.keys,m=p.exec(e);if(!m)return null;var h=m[0],y=m.slice(1),v=e===h;return i&&!v?null:{path:o,url:"/"===o&&""===h?"/":h,isExact:v,params:d.reduce(function(e,t,n){return e[t.name]=y[n],e},{})}},he=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function ye(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ve=function(e){return 0===i.a.Children.count(e)},be=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=ye(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props,r.context.router)},ye(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:he({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,a=e.strict,i=e.exact,u=e.sensitive;if(n)return n;p()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,c=(r||l.location).pathname;return me(c,{path:o,strict:a,exact:i,sensitive:u},l.match)},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!ve(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!ve(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,a=this.context.router,u=a.history,l=a.route,c=a.staticContext,s={match:e,location:this.props.location||l.location,history:u,staticContext:c};return r?e?i.a.createElement(r,s):null:o?e?o(s):null:"function"==typeof n?n(s):n&&!ve(n)?i.a.Children.only(n):null},t}(i.a.Component);be.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},be.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},be.childContextTypes={router:l.a.object.isRequired};var Ee=be,ge=Ee,_e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},we="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Te=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,a=e.activeClassName,u=e.className,l=e.activeStyle,c=e.style,s=e.isActive,f=e["aria-current"],p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),d="object"===(void 0===t?"undefined":we(t))?t.pathname:t,m=d&&d.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return i.a.createElement(ge,{path:m,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(s?s(r,n):r);return i.a.createElement(ie,_e({to:t,className:o?[u,a].filter(function(e){return e}).join(" "):u,style:o?_e({},c,l):c,"aria-current":o&&f||null},p))}})};Te.propTypes={to:ie.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,"aria-current":l.a.oneOf(["page","step","location","date","time","true"])},Te.defaultProps={activeClassName:"active","aria-current":"page"};var Oe=Te;var xe=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(i.a.Component);xe.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},xe.defaultProps={when:!0},xe.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var Pe=xe,Ce={},Se=0,Re=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=Ce[t]||(Ce[t]={});if(n[e])return n[e];var r=fe.a.compile(e);return Se<1e4&&(n[e]=r,Se++),r}(e)(t,{pretty:!0})},ke=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Ae=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=x(e.to),n=x(this.props.to);P(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?Re(n,t.params):ke({},n,{pathname:Re(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(i.a.Component);Ae.propTypes={computedMatch:l.a.object,push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},Ae.defaultProps={push:!1},Ae.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var Ne=Ae,je=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function De(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Me=function(e){return"/"===e.charAt(0)?e:"/"+e},Ie=function(e,t){return e?je({},t,{pathname:Me(e)+t.pathname}):t},Ue=function(e){return"string"==typeof e?e:T(e)},Ve=function(e){return function(){p()(!1,"You cannot %s with <StaticRouter>",e)}},Le=function(){},Be=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=De(this,e.call.apply(e,[this].concat(a))),r.createHref=function(e){return Me(r.props.basename+Ue(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=Ie(n,x(e)),o.url=Ue(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=Ie(n,x(e)),o.url=Ue(o.location)},r.handleListen=function(){return Le},r.handleBlock=function(){return Le},De(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Me(e);return 0!==t.pathname.indexOf(n)?t:je({},t,{pathname:t.pathname.substr(n.length)})}(t,x(n)),push:this.handlePush,replace:this.handleReplace,go:Ve("go"),goBack:Ve("goBack"),goForward:Ve("goForward"),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(K,je({},r,{history:o}))},t}(i.a.Component);Be.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},Be.defaultProps={basename:"",location:"/"},Be.childContextTypes={router:l.a.object.isRequired};var Fe=Be;var We=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return i.a.Children.forEach(t,function(t){if(null==r&&i.a.isValidElement(t)){var a=t.props,u=a.path,l=a.exact,c=a.strict,s=a.sensitive,f=a.from,p=u||f;o=t,r=me(n.pathname,{path:p,exact:l,strict:c,sensitive:s},e.match)}}),r?i.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(i.a.Component);We.contextTypes={router:l.a.shape({route:l.a.object.isRequired}).isRequired},We.propTypes={children:l.a.node,location:l.a.object};var ze=We,He=Re,qe=me,Ge=n(10),Ye=n.n(Ge),Ke=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var $e=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return i.a.createElement(Ee,{children:function(t){return i.a.createElement(e,Ke({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},Ye()(t,e)};n.d(t,"BrowserRouter",function(){return J}),n.d(t,"HashRouter",function(){return te}),n.d(t,"Link",function(){return ie}),n.d(t,"MemoryRouter",function(){return ce}),n.d(t,"NavLink",function(){return Oe}),n.d(t,"Prompt",function(){return Pe}),n.d(t,"Redirect",function(){return Ne}),n.d(t,"Route",function(){return ge}),n.d(t,"Router",function(){return $}),n.d(t,"StaticRouter",function(){return Fe}),n.d(t,"Switch",function(){return ze}),n.d(t,"generatePath",function(){return He}),n.d(t,"matchPath",function(){return qe}),n.d(t,"withRouter",function(){return $e})},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(17))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=u(n(23)),o=u(n(79)),a=u(n(1)),i=u(n(87));function u(e){return e&&e.__esModule?e:{default:e}}n(94);var l=document.getElementById("create-article-form");o.default.render(a.default.createElement(r.default,{store:i.default}),l)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(1)),o=n(3),a=n(19),i=l(n(0)),u=l(n(29));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){var t=e.store;return r.default.createElement(o.Provider,{store:t},r.default.createElement(a.BrowserRouter,null,r.default.createElement(a.Route,{path:"/",component:u.default})))};c.propTypes={store:i.default.object.isRequired},t.default=c},function(e,t,n){"use strict";
/** @license React v16.4.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(13),o=n(14),a=n(15),i=n(16),u="function"==typeof Symbol&&Symbol.for,l=u?Symbol.for("react.element"):60103,c=u?Symbol.for("react.portal"):60106,s=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,p=u?Symbol.for("react.profiler"):60114,d=u?Symbol.for("react.provider"):60109,m=u?Symbol.for("react.context"):60110,h=u?Symbol.for("react.async_mode"):60111,y=u?Symbol.for("react.forward_ref"):60112;u&&Symbol.for("react.timeout");var v="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var E={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function g(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||E}function _(){}function w(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||E}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=g.prototype;var T=w.prototype=new _;T.constructor=w,r(T,g.prototype),T.isPureReactComponent=!0;var O={current:null},x=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r=void 0,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&!P.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:l,type:e,key:a,ref:i,props:o,_owner:O.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var R=/\/+/g,k=[];function A(e,t,n,r){if(k.length){var o=k.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>k.length&&k.push(e)}function j(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case l:case c:a=!0}}if(a)return n(r,e,""===t?"."+D(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var u=t+D(o=e[i],i);a+=j(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=v&&e[v]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),i=0;!(o=e.next()).done;)a+=j(o=o.value,u=t+D(o,i++),n,r);else"object"===o&&b("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function D(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,i.thatReturnsArgument):null!=e&&(S(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function U(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(R,"$&/")+"/"),t=A(t,a,r,o),null==e||j(e,"",I,t),N(t)}var V={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=A(null,null,t,n),null==e||j(e,"",M,t),N(t)},count:function(e){return null==e?0:j(e,"",i.thatReturnsNull,null)},toArray:function(e){var t=[];return U(e,t,null,i.thatReturnsArgument),t},only:function(e){return S(e)||b("143"),e}},createRef:function(){return{current:null}},Component:g,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:m,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:y,render:e}},Fragment:s,StrictMode:f,unstable_AsyncMode:h,unstable_Profiler:p,createElement:C,cloneElement:function(e,t,n){(null===e||void 0===e)&&b("267",e);var o=void 0,a=r({},e.props),i=e.key,u=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,c=O.current),void 0!==t.key&&(i=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)x.call(t,o)&&!P.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:l,type:e.type,key:i,ref:u,props:a,_owner:c}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:S,version:"16.4.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:O,assign:r}},L={default:V},B=L&&V||L;e.exports=B.default?B.default:B},function(e,t,n){"use strict";var r=n(26);function o(){}e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),a=h(o),i=n(3),u=(h(n(30)),h(n(32)),function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5))),l=h(n(33)),c=h(n(45)),s=h(n(54)),f=h(n(59)),p=h(n(62)),d=n(19),m=h(n(65));function h(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){var e=this;return a.default.createElement("div",{className:"Page"},a.default.createElement("div",{className:"NavigationBar"},a.default.createElement("div",null,a.default.createElement("nav",null,a.default.createElement(d.Link,{to:"/"},"GENERAL"))),a.default.createElement("div",null,a.default.createElement("nav",null,a.default.createElement(d.Link,{to:"/equipment"},"EQUIPMENT"))),a.default.createElement("div",null,a.default.createElement("nav",null,a.default.createElement(d.Link,{to:"/skills"},"SKILLS"))),a.default.createElement("div",null,a.default.createElement("nav",null,a.default.createElement(d.Link,{to:"/magic"},"MAGIC"))),a.default.createElement("div",null,a.default.createElement("nav",null,a.default.createElement(d.Link,{to:"/rolls"},"ROLLS"))),a.default.createElement("button",{className:"serverButton",onClick:function(){confirm("Are you sure you want to overwrite your previous sheet?")&&(alert("Sheet Save to DB"),e.props.updateDatabaseEntry(e.props.fullAppState))}},"Save to Database"),a.default.createElement("button",{className:"serverButton",onClick:function(){confirm("Are you sure you don't want to save your current sheet?")&&(alert("Sheet loaded"),e.props.retrieveDatabaseEntry())}},"Retrieve from Database")),a.default.createElement("div",{className:"DisplayedPageAndBox"},a.default.createElement("div",{className:"DisplayedPage"},a.default.createElement(d.Route,{path:"/",exact:!0,component:c.default}),a.default.createElement(d.Route,{path:"/equipment",component:l.default}),a.default.createElement(d.Route,{path:"/skills",component:f.default}),a.default.createElement(d.Route,{path:"/magic",component:s.default}),a.default.createElement(d.Route,{path:"/rolls",component:p.default})),a.default.createElement(m.default,null)))}}]),t}();t.default=(0,i.connect)(function(e){return{fullAppState:{addRemove:e.addRemove,app:e.app,personalData:e.personalData}}},function(e){return{updateDatabaseEntry:function(t){return e(u.updateDatabaseEntry(t))},createDatabaseEntry:function(t){return e(u.createDatabaseEntry(t))},retrieveDatabaseEntry:function(){return e(u.retrieveDatabaseEntry())},setAddRemoveState:function(t){return e(u.retrieveAndSetAddRemove(t))},setAppState:function(t){return e(u.retrieveAndSetApp(t))},setPersonalState:function(t){return e(u.retrieveAndSetPersonal(t))}}})(y)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(1)),a=n(3),i=(function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);t.default=e}(n(5)),u(n(9)));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:"PersonalData"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Ids / Lifestyles / Currencies")),o.default.createElement(i.default,{name:"Primary Lifestyle",boxSize:"10",boxProps:"personalDataText",storeVal:"name",curVal:this.props.personalData.name,submitText:this.props.submitText}),o.default.createElement(i.default,{name:"Nuyen",boxSize:"10",boxProps:"personalDataText",storeVal:"metatype",curVal:this.props.personalData.metatype,submitText:this.props.submitText}),o.default.createElement(i.default,{name:"Licenses",boxSize:"10",boxProps:"personalDataText",storeVal:"ethnicity",curVal:this.props.personalData.ethnicity,submitText:this.props.submitText}),o.default.createElement(i.default,{name:"FakeIds",boxSize:"10",boxProps:"personalDataText",storeVal:"age",curVal:this.props.personalData.age,submitText:this.props.submitText}),o.default.createElement(i.default,{name:"Related Lifestyles",boxSize:"10",boxProps:"personalDataText",storeVal:"age",curVal:this.props.personalData.age,submitText:this.props.submitText}),o.default.createElement(i.default,{name:"Funds",boxSize:"10",boxProps:"personalDataText",storeVal:"age",curVal:this.props.personalData.age,submitText:this.props.submitText}))}}]),t}();t.default=(0,a.connect)(function(e){return{personalData:e.personalData}},function(e){return{}})(l)},function(e,t){var n=function(e){function t(){this.fetch=!1}return t.prototype=e,new t}("undefined"!=typeof self?self:this);(function(e){!function(e){if(!e.fetch){var t={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(t.arrayBuffer)var n=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],r=function(e){return e&&DataView.prototype.isPrototypeOf(e)},o=ArrayBuffer.isView||function(e){return e&&n.indexOf(Object.prototype.toString.call(e))>-1};s.prototype.append=function(e,t){e=u(e),t=l(t);var n=this.map[e];this.map[e]=n?n+","+t:t},s.prototype.delete=function(e){delete this.map[u(e)]},s.prototype.get=function(e){return e=u(e),this.has(e)?this.map[e]:null},s.prototype.has=function(e){return this.map.hasOwnProperty(u(e))},s.prototype.set=function(e,t){this.map[u(e)]=l(t)},s.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},s.prototype.keys=function(){var e=[];return this.forEach(function(t,n){e.push(n)}),c(e)},s.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),c(e)},s.prototype.entries=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),c(e)},t.iterable&&(s.prototype[Symbol.iterator]=s.prototype.entries);var a=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},h.call(y.prototype),h.call(b.prototype),b.prototype.clone=function(){return new b(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new s(this.headers),url:this.url})},b.error=function(){var e=new b(null,{status:0,statusText:""});return e.type="error",e};var i=[301,302,303,307,308];b.redirect=function(e,t){if(-1===i.indexOf(t))throw new RangeError("Invalid status code");return new b(null,{status:t,headers:{location:e}})},e.Headers=s,e.Request=y,e.Response=b,e.fetch=function(e,n){return new Promise(function(r,o){var a=new y(e,n),i=new XMLHttpRequest;i.onload=function(){var e={status:i.status,statusText:i.statusText,headers:function(e){var t=new s;return e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(e){var n=e.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();t.append(r,o)}}),t}(i.getAllResponseHeaders()||"")};e.url="responseURL"in i?i.responseURL:e.headers.get("X-Request-URL");var t="response"in i?i.response:i.responseText;r(new b(t,e))},i.onerror=function(){o(new TypeError("Network request failed"))},i.ontimeout=function(){o(new TypeError("Network request failed"))},i.open(a.method,a.url,!0),"include"===a.credentials?i.withCredentials=!0:"omit"===a.credentials&&(i.withCredentials=!1),"responseType"in i&&t.blob&&(i.responseType="blob"),a.headers.forEach(function(e,t){i.setRequestHeader(t,e)}),i.send(void 0===a._bodyInit?null:a._bodyInit)})},e.fetch.polyfill=!0}function u(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function l(e){return"string"!=typeof e&&(e=String(e)),e}function c(e){var n={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return t.iterable&&(n[Symbol.iterator]=function(){return n}),n}function s(e){this.map={},e instanceof s?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function f(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function p(e){return new Promise(function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function d(e){var t=new FileReader,n=p(t);return t.readAsArrayBuffer(e),n}function m(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function h(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(t.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(t.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(t.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(t.arrayBuffer&&t.blob&&r(e))this._bodyArrayBuffer=m(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!t.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!o(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=m(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},t.blob&&(this.blob=function(){var e=f(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(d)}),this.text=function(){var e=f(this);if(e)return e;if(this._bodyBlob)return function(e){var t=new FileReader,n=p(t);return t.readAsText(e),n}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},t.formData&&(this.formData=function(){return this.text().then(v)}),this.json=function(){return this.text().then(JSON.parse)},this}function y(e,t){var n=(t=t||{}).body;if(e instanceof y){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new s(e.headers)),this.method=e.method,this.mode=e.mode,n||null==e._bodyInit||(n=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new s(t.headers)),this.method=function(e){var t=e.toUpperCase();return a.indexOf(t)>-1?t:e}(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function v(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}}),t}function b(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new s(t.headers),this.url=t.url||"",this._initBody(e)}}(void 0!==e?e:this)}).call(n,void 0);var r=n.fetch;r.Response=n.Response,r.Request=n.Request,r.Headers=n.Headers;"object"==typeof e&&e.exports&&(e.exports=r,e.exports.default=r)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5));u(n(9)),u(n(18));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:"Core Combat Info"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Ids / Lifestyles / Currencies")))}}]),t}();t.default=(0,a.connect)(function(e){return{personalData:e.personalData}},function(e){return{remove:function(t){return e(i.removeCyberdeck(t))}}})(l)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(1)),o=s(n(34)),a=s(n(36)),i=s(n(38)),u=s(n(40)),l=s(n(42)),c=s(n(43));function s(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return r.default.createElement("div",{className:"displayedpage"},r.default.createElement("h4",null,"EQUIPMENT"),r.default.createElement(o.default,null),r.default.createElement(a.default,null),r.default.createElement(i.default,null),r.default.createElement(u.default,null),r.default.createElement(l.default,null),r.default.createElement(c.default,null))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(35));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.armors.forEach(function(n,r){t.push(o.default.createElement(u.default,{ind:r,setToCurrentArmor:e.props.setToCurrentArmor,remove:e.props.remove,key:r,armor:n.armor,rating:n.rating,notes:n.notes}))}),o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Armors")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{armors:e.addRemove.armorArray}},function(e){return{remove:function(t){return e(i.removeArmor(t))},setToCurrentArmor:function(t){return e(i.setToCurrentArmor(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("div",null,r.default.createElement("b",null,"Armor:"),r.default.createElement("input",{defaultValue:e.armor}),r.default.createElement("b",null,"Rating:"),r.default.createElement("input",{defaultValue:e.rating}),r.default.createElement("b",null,"Notes:"),r.default.createElement("input",{defaultValue:e.notes}),r.default.createElement("button",{onClick:function(){e.remove(e.ind)}},"remove"),r.default.createElement("button",{onClick:function(){e.setToCurrentArmor(e.ind)}},"Set to current"))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(37));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.cyberdecks.forEach(function(n,r){console.log(n),t.push(o.default.createElement(u.default,{ind:r,remove:e.props.remove,key:r,model:n.model,attack:n.attack,sleaze:n.sleaze,rating:n.rating,processing:n.processing,firewall:n.firewall,programs:n.programs}))}),o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Cyberdeck")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{cyberdecks:e.addRemove.cyberdeckArray}},function(e){return{remove:function(t){return e(i.removeCyberdeck(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.remove(e.ind)}},r.default.createElement("b",null,"Model:"),r.default.createElement("input",{defaultValue:e.model}),r.default.createElement("b",null,"Attack:"),r.default.createElement("input",{defaultValue:e.attack}),r.default.createElement("b",null,"Sleaze:"),r.default.createElement("input",{defaultValue:e.sleaze}),r.default.createElement("b",null,"Device Rating:"),r.default.createElement("input",{defaultValue:e.rating}),r.default.createElement("b",null,"Data Processing:"),r.default.createElement("input",{defaultValue:e.processing}),r.default.createElement("b",null,"Firewall:"),r.default.createElement("input",{defaultValue:e.firewall}),r.default.createElement("b",null,"Programs:"),r.default.createElement("input",{defaultValue:e.programs}),r.default.createElement("input",{type:"submit",value:"Remove"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(39));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.gears.forEach(function(n,r){t.push(o.default.createElement(u.default,{ind:r,remove:e.props.remove,key:r,item:n.item,rating:n.rating}))}),o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Gear")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{gears:e.addRemove.gearArray}},function(e){return{remove:function(t){return e(i.removeGear(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.remove(e.ind)}},r.default.createElement("b",null,"Item:"),r.default.createElement("input",{defaultValue:e.item}),r.default.createElement("b",null,"Rating:"),r.default.createElement("input",{defaultValue:e.rating}),r.default.createElement("input",{type:"submit",value:"Remove"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(41));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.meleeWeapons.forEach(function(n,r){t.push(o.default.createElement(u.default,{ind:r,setToCurrentMelee:e.props.setToCurrentMelee,remove:e.props.remove,key:r,weapon:n.weapon,reach:n.reach,damage:n.damage,accuracy:n.accuracy,ap:n.ap}))}),o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Melee Weapons")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{meleeWeapons:e.addRemove.meleeWeaponArray}},function(e){return{remove:function(t){return e(i.removeMeleeWeapon(t))},setToCurrentMelee:function(t){return e(i.setToCurrentMelee(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("div",null,r.default.createElement("b",null,"Weapon:"),r.default.createElement("input",{defaultValue:e.weapon}),r.default.createElement("b",null,"Reach:"),r.default.createElement("input",{defaultValue:e.reach}),r.default.createElement("b",null,"Damage:"),r.default.createElement("input",{defaultValue:e.damage}),r.default.createElement("b",null,"Accuracy:"),r.default.createElement("input",{defaultValue:e.accuracy}),r.default.createElement("b",null,"AP:"),r.default.createElement("input",{defaultValue:e.ap}),r.default.createElement("button",{onClick:function(){e.remove(e.ind)}},"remove"),r.default.createElement("button",{onClick:function(){e.setToCurrentMelee(e.ind)}},"Set to current"))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(18));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.rangedWeapons.forEach(function(n,r){var a;t.push(o.default.createElement(u.default,(c(a={ind:r,setToCurrentRanged:e.props.setToCurrentRanged,remove:e.props.remove},"ind",r),c(a,"key",r),c(a,"weapon",n.weapon),c(a,"damage",n.damage),c(a,"accuracy",n.accuracy),c(a,"ap",n.ap),c(a,"mode",n.mode),c(a,"rc",n.rc),c(a,"ammo",n.ammo),a)))}),o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"RangedWeapons")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{rangedWeapons:e.addRemove.rangedWeaponArray}},function(e){return{remove:function(t){return e(i.removeRangedWeapon(t))},setToCurrentRanged:function(t){return e(i.setToCurrentRanged(t))}}})(s)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(44));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.vehicles.forEach(function(n,r){t.push(o.default.createElement(u.default,{key:r,ind:r,remove:e.props.remove,vehicle:n.vehicle,handling:n.handling,acceleration:n.acceleration,speed:n.speed,pilot:n.pilot,body:n.body,armor:n.armor,sensor:n.sensor,notes:n.notes}))}),o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Vehicles")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{vehicles:e.addRemove.vehicleArray}},function(e){return{remove:function(t){return e(i.removeVehicle(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.remove(e.ind)}},r.default.createElement("b",null,"Vehicle:"),r.default.createElement("input",{defaultValue:e.vehicle}),r.default.createElement("b",null,"Handling:"),r.default.createElement("input",{defaultValue:e.handling}),r.default.createElement("b",null,"Acceleration:"),r.default.createElement("input",{defaultValue:e.acceleration}),r.default.createElement("b",null,"Speed:"),r.default.createElement("input",{defaultValue:e.speed}),r.default.createElement("b",null,"Pilot:"),r.default.createElement("input",{defaultValue:e.pilot}),r.default.createElement("b",null,"Body:"),r.default.createElement("input",{defaultValue:e.body}),r.default.createElement("b",null,"Armor:"),r.default.createElement("input",{defaultValue:e.armor}),r.default.createElement("b",null,"Sensor:"),r.default.createElement("input",{defaultValue:e.sensor}),r.default.createElement("b",null,"Notes:"),r.default.createElement("input",{defaultValue:e.notes}),r.default.createElement("input",{type:"submit",defaultValue:"Remove"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(1)),o=c(n(46)),a=c(n(47)),i=c(n(48)),u=c(n(50)),l=c(n(52));function c(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return r.default.createElement("div",{className:"displayedpage"},r.default.createElement("h4",null,"GENERAL"),r.default.createElement(o.default,null),r.default.createElement(a.default,null),r.default.createElement(i.default,null),r.default.createElement(u.default,null),r.default.createElement(l.default,null))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(9));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:"Attributes"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Attributes")),o.default.createElement("div",{className:"AttributesColumn"},o.default.createElement(u.default,{name:"Body",boxSize:"10",boxProps:"personalDataText",storeVal:"body",curVal:this.props.personalData.body,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Agility",boxSize:"10",boxProps:"personalDataText",storeVal:"agility",curVal:this.props.personalData.agility,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Reaction",boxSize:"10",boxProps:"personalDataText",storeVal:"reaction",curVal:this.props.personalData.reaction,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Strength",boxSize:"10",boxProps:"personalDataText",storeVal:"strength",curVal:this.props.personalData.strength,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Willpower",boxSize:"10",boxProps:"personalDataText",storeVal:"willpower",curVal:this.props.personalData.willpower,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Logic",boxSize:"10",boxProps:"personalDataText",storeVal:"logic",curVal:this.props.personalData.logic,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Intuition",boxSize:"10",boxProps:"personalDataText",storeVal:"intuition",curVal:this.props.personalData.intuition,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Charisma",boxSize:"10",boxProps:"personalDataText",storeVal:"charisma",curVal:this.props.personalData.charisma,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Edge",boxSize:"10",boxProps:"personalDataText",storeVal:"edge",curVal:this.props.personalData.edge,savePersonal:this.props.savePersonal,submitText:this.props.submitText})),o.default.createElement("div",{className:"AttributesColumn"},o.default.createElement(u.default,{name:"Essence",boxSize:"10",boxProps:"personalDataText",storeVal:"essence",curVal:this.props.personalData.essence,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Magic/Resonance",boxSize:"10",boxProps:"personalDataText",storeVal:"magic",curVal:this.props.personalData.magic,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Initiative",boxSize:"10",boxProps:"personalDataText",storeVal:"initiative",curVal:this.props.personalData.initiative,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Matrix Initiative",boxSize:"10",boxProps:"personalDataText",storeVal:"matrixInitiative",curVal:this.props.personalData.matrixInitiative,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Astral Initiative",boxSize:"10",boxProps:"personalDataText",storeVal:"astralInitiative",curVal:this.props.personalData.astralInitiative,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Composure",boxSize:"10",boxProps:"personalDataText",storeVal:"composure",curVal:this.props.personalData.composure,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Judge Intentions",boxSize:"10",boxProps:"personalDataText",storeVal:"judgeIntentions",curVal:this.props.personalData.judgeIntentions,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Memory",boxSize:"10",boxProps:"personalDataText",storeVal:"memory",curVal:this.props.personalData.memory,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Lift/Carry",boxSize:"10",boxProps:"personalDataText",storeVal:"lift",curVal:this.props.personalData.lift,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Movement",boxSize:"10",boxProps:"personalDataText",storeVal:"movement",curVal:this.props.personalData.movement,savePersonal:this.props.savePersonal,submitText:this.props.submitText})))}}]),t}();t.default=(0,a.connect)(function(e){return{personalData:e.personalData}},function(e){return{savePersonal:function(t){return e(i.savePersonal(t))},submitText:function(t){return e(i.submitText(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(9));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:"PersonalData"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Personal Data")),o.default.createElement(u.default,{name:"Name/Primary Alias",boxSize:"10",boxClass:"personalDataText",storeVal:"name",curVal:this.props.personalData.name,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"MetaType",boxSize:"10",boxClass:"personalDataText",storeVal:"metatype",curVal:this.props.personalData.metatype,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Ethnicity",boxSize:"10",boxClass:"personalDataText",storeVal:"ethnicity",curVal:this.props.personalData.ethnicity,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Age",boxSize:"10",boxClass:"personalDataText",storeVal:"age",curVal:this.props.personalData.age,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Sex",boxSize:"10",boxClass:"personalDataText",storeVal:"sex",curVal:this.props.personalData.sex,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Height",boxSize:"10",boxClass:"personalDataText",storeVal:"height",curVal:this.props.personalData.height,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Weight",boxSize:"10",boxClass:"personalDataText",storeVal:"weight",curVal:this.props.personalData.weight,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Street Cred",boxSize:"10",boxClass:"personalDataText",storeVal:"streetCred",curVal:this.props.personalData.streetCred,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Notoriety",boxSize:"10",boxClass:"personalDataText",storeVal:"notoriety",curVal:this.props.personalData.notoriety,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Public Awareness",boxSize:"10",boxClass:"personalDataText",storeVal:"publicAwareness",curVal:this.props.personalData.publicAwareness,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Karma",boxSize:"10",boxClass:"personalDataText",storeVal:"karma",curVal:this.props.personalData.karma,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Total Karma",boxSize:"10",boxClass:"personalDataText",storeVal:"totalKarma",curVal:this.props.personalData.totalKarma,savePersonal:this.props.savePersonal,submitText:this.props.submitText}),o.default.createElement(u.default,{name:"Misc",boxSize:"10",boxClass:"personalDataText",storeVal:"misc",curVal:this.props.personalData.misc,savePersonal:this.props.savePersonal,submitText:this.props.submitText}))}}]),t}();t.default=(0,a.connect)(function(e){return{personalData:e.personalData}},function(e){return{savePersonal:function(t){return e(i.savePersonal(t))},submitText:function(t){return e(i.submitText(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(49));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.contacts.forEach(function(n,r){console.log(n),t.push(o.default.createElement(u.default,{ind:r,remove:e.props.remove,key:r,name:n.name,loyalty:n.loyalty,connection:n.connection,favor:n.favor}))}),o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Contacts")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{contacts:e.addRemove.contactArray}},function(e){return{remove:function(t){return e(i.removeContact(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.remove(e.ind)}},r.default.createElement("b",null,"Name:"),r.default.createElement("input",{defaultValue:e.name}),r.default.createElement("b",null,"Loyalty:"),r.default.createElement("input",{defaultValue:e.loyalty}),r.default.createElement("b",null,"Connection:"),r.default.createElement("input",{defaultValue:e.connection}),r.default.createElement("b",null,"Favor:"),r.default.createElement("input",{defaultValue:e.favor}),r.default.createElement("input",{type:"submit",value:"Remove"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(51));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.qualities.forEach(function(n,r){t.push(o.default.createElement(u.default,{ind:r,remove:e.props.remove,key:r,quality:n.quality,notes:n.notes,type:n.type}))}),o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Qualities")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{qualities:e.addRemove.qualityArray}},function(e){return{remove:function(t){return e(i.removeQuality(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.remove(e.ind)}},r.default.createElement("b",null,"Quality:"),r.default.createElement("input",{defaultValue:e.quality}),r.default.createElement("b",null,"Notes:"),r.default.createElement("input",{defaultValue:e.notes}),r.default.createElement("b",null,"Type:"),r.default.createElement("input",{defaultValue:e.type}),r.default.createElement("input",{type:"submit",value:"Remove"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(53));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.augmentations.forEach(function(n,r){t.push(o.default.createElement(u.default,{ind:r,remove:e.props.remove,key:r,augmentation:n.augmentation,rating:n.rating,notes:n.notes,essence:n.essence}))}),o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Augmentations")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{augmentations:e.addRemove.augmentationArray}},function(e){return{remove:function(t){return e(i.removeAugmentation(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.remove(e.ind)}},r.default.createElement("b",null,"Augmentation:"),r.default.createElement("input",{defaultValue:e.augmentation}),r.default.createElement("b",null,"Rating:"),r.default.createElement("input",{defaultValue:e.rate}),r.default.createElement("b",null,"Notes:"),r.default.createElement("input",{defaultValue:e.notes}),r.default.createElement("b",null,"Essence:"),r.default.createElement("input",{defaultValue:e.essence}),r.default.createElement("input",{type:"submit",value:"Remove"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(1)),o=i(n(55)),a=i(n(57));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return r.default.createElement("div",{className:"displayedpage"},r.default.createElement("h4",null,"Magic"),r.default.createElement(o.default,null),r.default.createElement(a.default,null))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(56));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.spells.forEach(function(n,r){t.push(o.default.createElement(u.default,{ind:r,setToCurrentSpell:e.props.setToCurrentSpell,remove:e.props.remove,key:r,spell:n.spell,type:n.type,range:n.range,duration:n.duration,drain:n.drain}))}),o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Spells")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{spells:e.addRemove.spellArray}},function(e){return{remove:function(t){return e(i.removeSpell(t))},setToCurrentSpell:function(t){return e(i.setToCurrentSpell(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("div",null,r.default.createElement("b",null,"Spell/Power/Ritual/ComplexForm:"),r.default.createElement("input",{value:e.spell}),r.default.createElement("b",null,"Type/Target:"),r.default.createElement("input",{value:e.type}),r.default.createElement("b",null,"Range:"),r.default.createElement("input",{value:e.range}),r.default.createElement("b",null,"Duration:"),r.default.createElement("input",{value:e.duration}),r.default.createElement("b",null,"Drain:"),r.default.createElement("input",{value:e.drain}),r.default.createElement("button",{onClick:function(){e.remove(e.ind)}},"remove"),r.default.createElement("button",{onClick:function(){e.setToCurrentSpell(e.ind)}},"Set to current"))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(58));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.powers.forEach(function(n,r){t.push(o.default.createElement(u.default,{ind:r,remove:e.props.remove,key:r,name:n.name,rating:n.rating,notes:n.notes}))}),o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Powers")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{powers:e.addRemove.powerArray}},function(e){return{remove:function(t){return e(i.removePower(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.remove(e.ind)}},r.default.createElement("b",null,"Name:"),r.default.createElement("input",{defaultValue:e.name}),r.default.createElement("b",null,"Rating:"),r.default.createElement("input",{defaultValue:e.rating}),r.default.createElement("b",null,"Notes:"),r.default.createElement("input",{defaultValue:e.notes}),r.default.createElement("input",{type:"submit",value:"Remove"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(1)),o=a(n(60));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return r.default.createElement("div",{className:"displayedpage"},r.default.createElement("h4",null,"Skills"),r.default.createElement(o.default,null))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),a=n(3),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5)),u=l(n(61));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this,t=[];return this.props.skills.forEach(function(n,r){console.log(n),t.push(o.default.createElement(u.default,{ind:r,remove:e.props.remove,key:r,skill:n.skill,rating:n.rating,type:n.type}))}),o.default.createElement("div",{className:"SkillsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("h4",null,"Skills")),t)}}]),t}();t.default=(0,a.connect)(function(e){return{skills:e.addRemove.skillArray}},function(e){return{remove:function(t){return e(i.removeSkill(t))}}})(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.remove(e.ind)}},r.default.createElement("b",null,"Skill:"),r.default.createElement("input",{defaultValue:e.skill}),r.default.createElement("b",null,"Rating:"),r.default.createElement("input",{defaultValue:e.rating}),r.default.createElement("b",null,"Type:"),r.default.createElement("input",{defaultValue:e.type}),r.default.createElement("input",{type:"submit",value:"Remove"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(1)),o=i(n(63)),a=i(n(64));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return r.default.createElement("div",{className:"displayedpage"},r.default.createElement("h4",null,"Rolls"),r.default.createElement(a.default,null),r.default.createElement(o.default,null))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(1)),a=n(3);!function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);t.default=e}(n(5));var i=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("b",null,"Initiative Scores:")),o.default.createElement("p",null,"Physical: ",parseInt(this.props.personalData.reaction)+parseInt(this.props.personalData.intuition)))}}]),t}();t.default=(0,a.connect)(function(e){return{personalData:e.personalData}},function(e){return{}})(i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(1)),a=n(3);!function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);t.default=e}(n(5));var i=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=[];return this.props.curMeleeWeapon&&e.push(o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("b",null,"Current Melee Weapon")),o.default.createElement("p",null,"Weapon Name: ",this.props.curMeleeWeapon.weapon),o.default.createElement("p",null,"Weapon Reach: ",this.props.curMeleeWeapon.reach," "),o.default.createElement("p",null,"Weapon Damage: ",this.props.curMeleeWeapon.damage," "),o.default.createElement("p",null,"Weapon Accuracy: ",this.props.curMeleeWeapon.accuracy," "),o.default.createElement("p",null,"Weapon AP: ",this.props.curMeleeWeapon.ap))),this.props.curRangedWeapon&&e.push(o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("b",null,"Current Ranged Weapon")),o.default.createElement("p",null,"Weapon:",this.props.weapon),o.default.createElement("p",null,"Damage:",this.props.damage),o.default.createElement("p",null,"Accuracy:",this.props.accuracy),o.default.createElement("p",null,"AP:",this.props.ap),o.default.createElement("p",null,"Mode:",this.props.mode),o.default.createElement("p",null,"RC:",this.props.rc),o.default.createElement("p",null,"Ammo:",this.props.ammo))),this.props.curSpell&&e.push(o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("b",null,"Current Spell")),o.default.createElement("p",null,"Spell/Power/Ritual/ComplexForm: ",this.props.spell),o.default.createElement("p",null,"Type/Target: ",this.props.type),o.default.createElement("p",null,"Range: ",this.props.range),o.default.createElement("p",null,"Duration: ",this.props.duration),o.default.createElement("p",null,"Drain: ",this.props.drain))),this.props.curArmor&&e.push(o.default.createElement("div",{className:"WeaponsContainer"},o.default.createElement("p",{className:"header"},o.default.createElement("b",null,"Current Spell")),o.default.createElement("p",null,"Armor ",this.props.curArmor.armor),o.default.createElement("p",null,"Rating: ",this.props.curArmor.rating," "),o.default.createElement("p",null,"Notes: ",this.props.curArmor.notes," "))),o.default.createElement("div",null,e)}}]),t}();t.default=(0,a.connect)(function(e){return{curMeleeWeapon:e.addRemove.curMeleeWeapon,curRangedWeapon:e.addRemove.curRangedWeapon,curSpell:e.addRemove.curSpell,curArmor:e.addRemove.curArmor}},function(e){return{}})(i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),a=c(o),i=n(3),u=c(n(66)),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5));function c(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.handleChange=e.handleChange.bind(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"handleChange",value:function(e){e.preventDefault(),this.props.boxChange(document.getElementById("BoxSelect").value)}},{key:"render",value:function(){return a.default.createElement("div",{className:"SelectBox"},a.default.createElement("p",{className:"header"},a.default.createElement("h4",null,"Add An Item")),a.default.createElement("select",{id:"BoxSelect",onChange:this.handleChange},a.default.createElement("option",{value:"meleeWeapon"},"Melee Weapon"),a.default.createElement("option",{value:"armor"},"Armor"),a.default.createElement("option",{value:"augmentation"},"Augmentation"),a.default.createElement("option",{value:"contact"},"Contact"),a.default.createElement("option",{value:"cyberdeck"},"Cyberdeck"),a.default.createElement("option",{value:"gear"},"Gear"),a.default.createElement("option",{value:"power"},"Power"),a.default.createElement("option",{value:"quality"},"Quality"),a.default.createElement("option",{value:"rangedWeapon"},"Ranged Weapon"),a.default.createElement("option",{value:"skill"},"Skill"),a.default.createElement("option",{value:"spell"},"Spell"),a.default.createElement("option",{value:"vehicle"},"Vehicle")),a.default.createElement(u.default,{box:this.props.boxDisplay,adds:this.props.adds}))}}]),t}();t.default=(0,i.connect)(function(e){return{boxDisplay:e.app.boxDisplay}},function(e){return{boxChange:function(t){return e(l.boxChange(t))},adds:{meleeWeapon:function(t){return e(l.addMeleeWeapon(t))},rangedWeapon:function(t){return e(l.addRangedWeapon(t))},armor:function(t){return e(l.addArmor(t))},augmentation:function(t){return e(l.addAugmentation(t))},contact:function(t){return e(l.addContact(t))},cyberdeck:function(t){return e(l.addCyberdeck(t))},gear:function(t){return e(l.addGear(t))},power:function(t){return e(l.addPower(t))},quality:function(t){return e(l.addQuality(t))},skill:function(t){return e(l.addSkill(t))},spell:function(t){return e(l.addSpell(t))},vehicle:function(t){return e(l.addVehicle(t))}}}})(s)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),a=b(o),i=b(n(67)),u=b(n(68)),l=b(n(69)),c=b(n(70)),s=b(n(71)),f=b(n(72)),p=b(n(73)),d=b(n(74)),m=b(n(75)),h=b(n(76)),y=b(n(77)),v=b(n(78));function b(e){return e&&e.__esModule?e:{default:e}}var E=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return"meleeWeapon"===this.props.box?a.default.createElement(f.default,{addAction:this.props.adds.meleeWeapon}):"rangedWeapon"===this.props.box?a.default.createElement(m.default,{addAction:this.props.adds.rangedWeapon}):"armor"===this.props.box?a.default.createElement(i.default,{addAction:this.props.adds.armor}):"augmentation"===this.props.box?a.default.createElement(u.default,{addAction:this.props.adds.augmentation}):"contact"===this.props.box?a.default.createElement(l.default,{addAction:this.props.adds.contact}):"cyberdeck"===this.props.box?a.default.createElement(c.default,{addAction:this.props.adds.cyberdeck}):"gear"===this.props.box?a.default.createElement(s.default,{addAction:this.props.adds.gear}):"power"===this.props.box?a.default.createElement(p.default,{addAction:this.props.adds.power}):"quality"===this.props.box?a.default.createElement(d.default,{addAction:this.props.adds.quality}):"skill"===this.props.box?a.default.createElement(h.default,{addAction:this.props.adds.skill}):"spell"===this.props.box?a.default.createElement(y.default,{addAction:this.props.adds.spell}):"vehicle"===this.props.box?a.default.createElement(v.default,{addAction:this.props.adds.vehicle}):void 0}}]),t}();t.default=E},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.addAction({armor:document.getElementById("armor").value,rating:document.getElementById("rating").value,notes:document.getElementById("notes").value})}},r.default.createElement("b",null,"Armor:"),r.default.createElement("input",{id:"armor"}),r.default.createElement("b",null,"Rating:"),r.default.createElement("input",{id:"rating"}),r.default.createElement("b",null,"Notes:"),r.default.createElement("input",{id:"notes"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.addAction({augmentation:document.getElementById("augmentation").value,rating:document.getElementById("rating").value,notes:document.getElementById("notes").value,essence:document.getElementById("essence").value})}},r.default.createElement("b",null,"Augmentation:"),r.default.createElement("input",{id:"augmentation"}),r.default.createElement("b",null,"Rating:"),r.default.createElement("input",{id:"rating"}),r.default.createElement("b",null,"Notes:"),r.default.createElement("input",{id:"notes"}),r.default.createElement("b",null,"Essence:"),r.default.createElement("input",{id:"essence"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.addAction({name:document.getElementById("name").value,loyalty:document.getElementById("loyalty").value,connection:document.getElementById("connection").value,favor:document.getElementById("favor").value})}},r.default.createElement("b",null,"Name:"),r.default.createElement("input",{id:"name"}),r.default.createElement("b",null,"Loyalty:"),r.default.createElement("input",{id:"loyalty"}),r.default.createElement("b",null,"Connection:"),r.default.createElement("input",{id:"connection"}),r.default.createElement("b",null,"Favor:"),r.default.createElement("input",{id:"favor"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.addAction({model:document.getElementById("model").value,attack:document.getElementById("attack").value,sleaze:document.getElementById("sleaze").value,rating:document.getElementById("rating").value,processing:document.getElementById("processing").value,firewall:document.getElementById("firewall").value,programs:document.getElementById("programs").value})}},r.default.createElement("b",null,"Model:"),r.default.createElement("input",{id:"model"}),r.default.createElement("b",null,"Attack:"),r.default.createElement("input",{id:"attack"}),r.default.createElement("b",null,"Sleaze:"),r.default.createElement("input",{id:"sleaze"}),r.default.createElement("b",null,"Device Rating:"),r.default.createElement("input",{id:"rating"}),r.default.createElement("b",null,"Data Processing:"),r.default.createElement("input",{id:"processing"}),r.default.createElement("b",null,"Firewall:"),r.default.createElement("input",{id:"firewall"}),r.default.createElement("b",null,"Programs:"),r.default.createElement("input",{id:"programs"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.addAction({item:document.getElementById("item").value,rating:document.getElementById("rating").value})}},r.default.createElement("b",null,"Item:"),r.default.createElement("input",{id:"item"}),r.default.createElement("b",null,"Rating:"),r.default.createElement("input",{id:"rating"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.addAction({weapon:document.getElementById("weapon").value,reach:document.getElementById("reach").value,damage:document.getElementById("damage").value,accuracy:document.getElementById("accuracy").value,ap:document.getElementById("ap").value})}},r.default.createElement("b",null,"Weapon:"),r.default.createElement("input",{id:"weapon"}),r.default.createElement("b",null,"Reach:"),r.default.createElement("input",{id:"reach"}),r.default.createElement("b",null,"Damage:"),r.default.createElement("input",{id:"damage"}),r.default.createElement("b",null,"Accuracy:"),r.default.createElement("input",{id:"accuracy"}),r.default.createElement("b",null,"AP:"),r.default.createElement("input",{id:"ap"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.addAction({name:document.getElementById("name").value,rating:document.getElementById("rating").value,notes:document.getElementById("notes").value})}},r.default.createElement("b",null,"Name:"),r.default.createElement("input",{id:"name"}),r.default.createElement("b",null,"Rating:"),r.default.createElement("input",{id:"rating"}),r.default.createElement("b",null,"Notes:"),r.default.createElement("input",{id:"notes"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault();var n=void 0;n=document.getElementById("typep").checked?"postive":document.getElementById("typen").checked?"negative":"unselected",e.addAction({quality:document.getElementById("quality").value,notes:document.getElementById("notes").value,type:n})}},r.default.createElement("b",null,"Quality:"),r.default.createElement("input",{id:"quality"}),r.default.createElement("b",null,"Notes:"),r.default.createElement("input",{id:"notes"}),r.default.createElement("b",null,"Type: "),"Positive",r.default.createElement("input",{name:"quality",type:"radio",id:"typep",value:"positive"}),"Negative",r.default.createElement("input",{name:"quality",type:"radio",id:"typen",value:"negative"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.addAction({weapon:document.getElementById("weapon").value,damage:document.getElementById("damage").value,accuracy:document.getElementById("accuracy").value,ap:document.getElementById("ap").value,mode:document.getElementById("mode").value,rc:document.getElementById("rc").value,ammo:document.getElementById("ammo").value})}},r.default.createElement("b",null,"Weapon:"),r.default.createElement("input",{id:"weapon"}),r.default.createElement("b",null,"Damage:"),r.default.createElement("input",{id:"damage"}),r.default.createElement("b",null,"Accuracy:"),r.default.createElement("input",{id:"accuracy"}),r.default.createElement("b",null,"AP:"),r.default.createElement("input",{id:"ap"}),r.default.createElement("b",null,"Mode:"),r.default.createElement("input",{id:"mode"}),r.default.createElement("b",null,"RC:"),r.default.createElement("input",{id:"rc"}),r.default.createElement("b",null,"Ammo:"),r.default.createElement("input",{id:"ammo"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault();var n=void 0;n=document.getElementById("typea").checked?"active":document.getElementById("typek").checked?"knowledge":"unselected",e.addAction({skill:document.getElementById("skill").value,rating:document.getElementById("rating").value,type:n})}},r.default.createElement("b",null,"Skill:"),r.default.createElement("input",{id:"skill"}),r.default.createElement("b",null,"Rating:"),r.default.createElement("input",{id:"rating"}),r.default.createElement("b",null,"Type:"),"Active",r.default.createElement("input",{name:"quality",type:"radio",id:"typea",value:"active"}),"Knowledge",r.default.createElement("input",{name:"quality",type:"radio",id:"typek",value:"knowledge"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.addAction({spell:document.getElementById("spell").value,type:document.getElementById("spelltype").value,range:document.getElementById("range").value,duration:document.getElementById("duration").value,drain:document.getElementById("drain").value})}},r.default.createElement("b",null,"Spell/Power/Ritual/ComplexForm:"),r.default.createElement("input",{id:"spell"}),r.default.createElement("b",null,"Type/Target:"),r.default.createElement("input",{id:"spelltype"}),r.default.createElement("b",null,"Range:"),r.default.createElement("input",{id:"range"}),r.default.createElement("b",null,"Duration:"),r.default.createElement("input",{id:"duration"}),r.default.createElement("b",null,"Drain:"),r.default.createElement("input",{id:"drain"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.default=function(e){return r.default.createElement("form",{className:e.className,onSubmit:function(t){t.preventDefault(),e.addAction({vehicle:document.getElementById("vehicle").value,handling:document.getElementById("handling").value,acceleration:document.getElementById("acceleration").value,speed:document.getElementById("speed").value,pilot:document.getElementById("pilot").value,body:document.getElementById("body").value,armor:document.getElementById("armor").value,sensor:document.getElementById("sensor").value,notes:document.getElementById("notes").value})}},r.default.createElement("b",null,"Vehicle:"),r.default.createElement("input",{id:"vehicle"}),r.default.createElement("b",null,"Handling:"),r.default.createElement("input",{id:"handling"}),r.default.createElement("b",null,"Acceleration:"),r.default.createElement("input",{id:"acceleration"}),r.default.createElement("b",null,"Speed:"),r.default.createElement("input",{id:"speed"}),r.default.createElement("b",null,"Pilot:"),r.default.createElement("input",{id:"pilot"}),r.default.createElement("b",null,"Body:"),r.default.createElement("input",{id:"body"}),r.default.createElement("b",null,"Armor:"),r.default.createElement("input",{id:"armor"}),r.default.createElement("b",null,"Sensor:"),r.default.createElement("input",{id:"sensor"}),r.default.createElement("b",null,"Notes:"),r.default.createElement("input",{id:"notes"}),r.default.createElement("input",{type:"submit"}))}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(80)},function(e,t,n){"use strict";
/** @license React v16.4.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(14),o=n(1),a=n(81),i=n(13),u=n(16),l=n(82),c=n(83),s=n(84),f=n(15);function p(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,a,i,u,l){(function(e,t,n,r,o,a,i,u,l){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,u,l){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var c=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var e=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,e}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var e=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,e}p("198")}};var m=null,h={};function y(){if(m)for(var e in h){var t=h[e],n=m.indexOf(e);if(-1<n||p("96",e),!b[n])for(var r in t.extractEvents||p("97",e),b[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,u=r;E.hasOwnProperty(u)&&p("99",u),E[u]=a;var l=a.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&v(l[o],i,u);o=!0}else a.registrationName?(v(a.registrationName,i,u),o=!0):o=!1;o||p("98",r,e)}}}function v(e,t,n){g[e]&&p("100",e),g[e]=t,_[e]=t.eventTypes[n].dependencies}var b=[],E={},g={},_={};function w(e){m&&p("101"),m=Array.prototype.slice.call(e),y()}function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&p("102",t),h[t]=r,n=!0)}n&&y()}var O={plugins:b,eventNameDispatchConfigs:E,registrationNameModules:g,registrationNameDependencies:_,possibleRegistrationNames:null,injectEventPluginOrder:w,injectEventPluginsByName:T},x=null,P=null,C=null;function S(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=C(r),d.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function R(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function k(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var A=null;function N(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)S(e,t,n[o],r[o]);else n&&S(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function j(e){return N(e,!0)}function D(e){return N(e,!1)}var M={injectEventPluginOrder:w,injectEventPluginsByName:T};function I(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function U(e,t){null!==e&&(A=R(A,e)),e=A,A=null,e&&(k(e,t?j:D),A&&p("95"),d.rethrowCaughtError())}function V(e,t,n,r){for(var o=null,a=0;a<b.length;a++){var i=b[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=R(o,i))}U(o,!1)}var L={injection:M,getListener:I,runEventsInBatch:U,runExtractedEventsInBatch:V},B=Math.random().toString(36).slice(2),F="__reactInternalInstance$"+B,W="__reactEventHandlers$"+B;function z(e){if(e[F])return e[F];for(;!e[F];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[F]).tag||6===e.tag?e:null}function H(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function q(e){return e[W]||null}var G={precacheFiberNode:function(e,t){t[F]=e},getClosestInstanceFromNode:z,getInstanceFromNode:function(e){return!(e=e[F])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:H,getFiberCurrentPropsFromNode:q,updateFiberProps:function(e,t){e[W]=t}};function Y(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function K(e,t,n){for(var r=[];e;)r.push(e),e=Y(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function $(e,t,n){(t=I(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=R(n._dispatchListeners,t),n._dispatchInstances=R(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.phasedRegistrationNames&&K(e._targetInst,$,e)}function X(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;K(t=t?Y(t):null,$,e)}}function J(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=I(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=R(n._dispatchListeners,t),n._dispatchInstances=R(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&J(e._targetInst,null,e)}function ee(e){k(e,Q)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,u=o;u;u=Y(u))i++;u=0;for(var l=a;l;l=Y(l))u++;for(;0<i-u;)o=Y(o),i--;for(;0<u-i;)a=Y(a),u--;for(;i--;){if(o===a||o===a.alternate)break e;o=Y(o),a=Y(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=Y(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=Y(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",e);for(e=n.length;0<e--;)J(n[e],"captured",t)}var ne={accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){k(e,X)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){k(e,Z)}};function re(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var oe={animationend:re("Animation","AnimationEnd"),animationiteration:re("Animation","AnimationIteration"),animationstart:re("Animation","AnimationStart"),transitionend:re("Transition","TransitionEnd")},ae={},ie={};function ue(e){if(ae[e])return ae[e];if(!oe[e])return e;var t,n=oe[e];for(t in n)if(n.hasOwnProperty(t)&&t in ie)return ae[e]=n[t];return e}a.canUseDOM&&(ie=document.createElement("div").style,"AnimationEvent"in window||(delete oe.animationend.animation,delete oe.animationiteration.animation,delete oe.animationstart.animation),"TransitionEvent"in window||delete oe.transitionend.transition);var le=ue("animationend"),ce=ue("animationiteration"),se=ue("animationstart"),fe=ue("transitionend"),pe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),de=null;function me(){return!de&&a.canUseDOM&&(de="textContent"in document.documentElement?"textContent":"innerText"),de}var he={_root:null,_startText:null,_fallbackText:null};function ye(){if(he._fallbackText)return he._fallbackText;var e,t,n=he._startText,r=n.length,o=ve(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return he._fallbackText=o.slice(e,1<t?1-t:void 0),he._fallbackText}function ve(){return"value"in he._root?he._root.value:he._root[me()]}var be="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),Ee={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ge(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function _e(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function we(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Te(e){e.eventPool=[],e.getPooled=_e,e.release=we}i(ge.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<be.length;t++)this[be[t]]=null}}),ge.Interface=Ee,ge.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Te(n),n},Te(ge);var Oe=ge.extend({data:null}),xe=ge.extend({data:null}),Pe=[9,13,27,32],Ce=a.canUseDOM&&"CompositionEvent"in window,Se=null;a.canUseDOM&&"documentMode"in document&&(Se=document.documentMode);var Re=a.canUseDOM&&"TextEvent"in window&&!Se,ke=a.canUseDOM&&(!Ce||Se&&8<Se&&11>=Se),Ae=String.fromCharCode(32),Ne={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},je=!1;function De(e,t){switch(e){case"keyup":return-1!==Pe.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Me(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ie=!1;var Ue={eventTypes:Ne,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(Ce)e:{switch(e){case"compositionstart":o=Ne.compositionStart;break e;case"compositionend":o=Ne.compositionEnd;break e;case"compositionupdate":o=Ne.compositionUpdate;break e}o=void 0}else Ie?De(e,n)&&(o=Ne.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Ne.compositionStart);return o?(ke&&(Ie||o!==Ne.compositionStart?o===Ne.compositionEnd&&Ie&&(a=ye()):(he._root=r,he._startText=ve(),Ie=!0)),o=Oe.getPooled(o,t,n,r),a?o.data=a:null!==(a=Me(n))&&(o.data=a),ee(o),a=o):a=null,(e=Re?function(e,t){switch(e){case"compositionend":return Me(t);case"keypress":return 32!==t.which?null:(je=!0,Ae);case"textInput":return(e=t.data)===Ae&&je?null:e;default:return null}}(e,n):function(e,t){if(Ie)return"compositionend"===e||!Ce&&De(e,t)?(e=ye(),he._root=null,he._startText=null,he._fallbackText=null,Ie=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ke?null:t.data;default:return null}}(e,n))?((t=xe.getPooled(Ne.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===a?t:null===t?a:[a,t]}},Ve=null,Le={injectFiberControlledHostComponent:function(e){Ve=e}},Be=null,Fe=null;function We(e){if(e=P(e)){Ve&&"function"==typeof Ve.restoreControlledState||p("194");var t=x(e.stateNode);Ve.restoreControlledState(e.stateNode,e.type,t)}}function ze(e){Be?Fe?Fe.push(e):Fe=[e]:Be=e}function He(){return null!==Be||null!==Fe}function qe(){if(Be){var e=Be,t=Fe;if(Fe=Be=null,We(e),t)for(e=0;e<t.length;e++)We(t[e])}}var Ge={injection:Le,enqueueStateRestore:ze,needsStateRestore:He,restoreStateIfNeeded:qe};function Ye(e,t){return e(t)}function Ke(e,t,n){return e(t,n)}function $e(){}var Qe=!1;function Xe(e,t){if(Qe)return e(t);Qe=!0;try{return Ye(e,t)}finally{Qe=!1,He()&&($e(),qe())}}var Je={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Je[e.type]:"textarea"===t}function et(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function tt(e,t){return!(!a.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function nt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function rt(e){e._valueTracker||(e._valueTracker=function(e){var t=nt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ot(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=nt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var at=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,it="function"==typeof Symbol&&Symbol.for,ut=it?Symbol.for("react.element"):60103,lt=it?Symbol.for("react.portal"):60106,ct=it?Symbol.for("react.fragment"):60107,st=it?Symbol.for("react.strict_mode"):60108,ft=it?Symbol.for("react.profiler"):60114,pt=it?Symbol.for("react.provider"):60109,dt=it?Symbol.for("react.context"):60110,mt=it?Symbol.for("react.async_mode"):60111,ht=it?Symbol.for("react.forward_ref"):60112,yt=it?Symbol.for("react.timeout"):60113,vt="function"==typeof Symbol&&Symbol.iterator;function bt(e){return null===e||void 0===e?null:"function"==typeof(e=vt&&e[vt]||e["@@iterator"])?e:null}function Et(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case mt:return"AsyncMode";case dt:return"Context.Consumer";case ct:return"ReactFragment";case lt:return"ReactPortal";case ft:return"Profiler("+e.pendingProps.id+")";case pt:return"Context.Provider";case st:return"StrictMode";case yt:return"Timeout"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case ht:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function gt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=Et(e),a=null;n&&(a=Et(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":a?" (created by "+a+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var _t=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,wt=Object.prototype.hasOwnProperty,Tt={},Ot={};function xt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var Pt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Pt[e]=new xt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Pt[t]=new xt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){Pt[e]=new xt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){Pt[e]=new xt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Pt[e]=new xt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){Pt[e]=new xt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){Pt[e]=new xt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){Pt[e]=new xt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){Pt[e]=new xt(e,5,!1,e.toLowerCase(),null)});var Ct=/[\-:]([a-z])/g;function St(e){return e[1].toUpperCase()}function Rt(e,t,n,r){var o=Pt.hasOwnProperty(t)?Pt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!wt.call(Ot,e)||!wt.call(Tt,e)&&(_t.test(e)?Ot[e]=!0:(Tt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function kt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function At(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=It(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Nt(e,t){null!=(t=t.checked)&&Rt(e,"checked",t,!1)}function jt(e,t){Nt(e,t);var n=It(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?Mt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Mt(e,t.type,It(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Dt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){t=""+e._wrapperState.initialValue;var r=e.value;n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==n&&(e.name=n)}function Mt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function It(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Ct,St);Pt[t]=new xt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Ct,St);Pt[t]=new xt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Ct,St);Pt[t]=new xt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),Pt.tabIndex=new xt("tabIndex",1,!1,"tabindex",null);var Ut={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Vt(e,t,n){return(e=ge.getPooled(Ut.change,e,t,n)).type="change",ze(n),ee(e),e}var Lt=null,Bt=null;function Ft(e){U(e,!1)}function Wt(e){if(ot(H(e)))return e}function zt(e,t){if("change"===e)return t}var Ht=!1;function qt(){Lt&&(Lt.detachEvent("onpropertychange",Gt),Bt=Lt=null)}function Gt(e){"value"===e.propertyName&&Wt(Bt)&&Xe(Ft,e=Vt(Bt,e,et(e)))}function Yt(e,t,n){"focus"===e?(qt(),Bt=n,(Lt=t).attachEvent("onpropertychange",Gt)):"blur"===e&&qt()}function Kt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Wt(Bt)}function $t(e,t){if("click"===e)return Wt(t)}function Qt(e,t){if("input"===e||"change"===e)return Wt(t)}a.canUseDOM&&(Ht=tt("input")&&(!document.documentMode||9<document.documentMode));var Xt={eventTypes:Ut,_isInputEventSupported:Ht,extractEvents:function(e,t,n,r){var o=t?H(t):window,a=void 0,i=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?a=zt:Ze(o)?Ht?a=Qt:(a=Kt,i=Yt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=$t),a&&(a=a(e,t)))return Vt(a,n,r);i&&i(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Mt(o,"number",o.value)}},Jt=ge.extend({view:null,detail:null}),Zt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function en(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Zt[e])&&!!t[e]}function tn(){return en}var nn=Jt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:tn,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),rn=nn.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),on={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},an={eventTypes:on,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,t=(t=n.relatedTarget||n.toElement)?z(t):null):a=null,a===t)return null;var i=void 0,u=void 0,l=void 0,c=void 0;return"mouseout"===e||"mouseover"===e?(i=nn,u=on.mouseLeave,l=on.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=rn,u=on.pointerLeave,l=on.pointerEnter,c="pointer"),e=null==a?o:H(a),o=null==t?o:H(t),(u=i.getPooled(u,a,n,r)).type=c+"leave",u.target=e,u.relatedTarget=o,(n=i.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=e,te(u,n,a,t),[u,n]}};function un(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function ln(e){2!==un(e)&&p("188")}function cn(e){var t=e.alternate;if(!t)return 3===(t=un(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return ln(o),e;if(i===r)return ln(o),t;i=i.sibling}p("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var u=o.child;u;){if(u===n){i=!0,n=o,r=a;break}if(u===r){i=!0,r=o,n=a;break}u=u.sibling}if(!i){for(u=a.child;u;){if(u===n){i=!0,n=a,r=o;break}if(u===r){i=!0,r=a,n=o;break}u=u.sibling}i||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function sn(e){if(!(e=cn(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var fn=ge.extend({animationName:null,elapsedTime:null,pseudoElement:null}),pn=ge.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),dn=Jt.extend({relatedTarget:null});function mn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var hn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},yn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},vn=Jt.extend({key:function(e){if(e.key){var t=hn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=mn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?yn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:tn,charCode:function(e){return"keypress"===e.type?mn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?mn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),bn=nn.extend({dataTransfer:null}),En=Jt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:tn}),gn=ge.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),_n=nn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),wn=[["abort","abort"],[le,"animationEnd"],[ce,"animationIteration"],[se,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[fe,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],Tn={},On={};function xn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},Tn[e]=t,On[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){xn(e,!0)}),wn.forEach(function(e){xn(e,!1)});var Pn={eventTypes:Tn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=On[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=On[e];if(!o)return null;switch(e){case"keypress":if(0===mn(n))return null;case"keydown":case"keyup":e=vn;break;case"blur":case"focus":e=dn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=bn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=En;break;case le:case ce:case se:e=fn;break;case fe:e=gn;break;case"scroll":e=Jt;break;case"wheel":e=_n;break;case"copy":case"cut":case"paste":e=pn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=rn;break;default:e=ge}return ee(t=e.getPooled(o,t,n,r)),t}},Cn=Pn.isInteractiveTopLevelEventType,Sn=[];function Rn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=z(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],V(e.topLevelType,t,e.nativeEvent,et(e.nativeEvent))}var kn=!0;function An(e){kn=!!e}function Nn(e,t){if(!t)return null;var n=(Cn(e)?Dn:Mn).bind(null,e);t.addEventListener(e,n,!1)}function jn(e,t){if(!t)return null;var n=(Cn(e)?Dn:Mn).bind(null,e);t.addEventListener(e,n,!0)}function Dn(e,t){Ke(Mn,e,t)}function Mn(e,t){if(kn){var n=et(t);if(null===(n=z(n))||"number"!=typeof n.tag||2===un(n)||(n=null),Sn.length){var r=Sn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Xe(Rn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Sn.length&&Sn.push(e)}}}var In={get _enabled(){return kn},setEnabled:An,isEnabled:function(){return kn},trapBubbledEvent:Nn,trapCapturedEvent:jn,dispatchEvent:Mn},Un={},Vn=0,Ln="_reactListenersID"+(""+Math.random()).slice(2);function Bn(e){return Object.prototype.hasOwnProperty.call(e,Ln)||(e[Ln]=Vn++,Un[e[Ln]]={}),Un[e[Ln]]}function Fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Wn(e,t){var n,r=Fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Fn(r)}}function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Hn=a.canUseDOM&&"documentMode"in document&&11>=document.documentMode,qn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Gn=null,Yn=null,Kn=null,$n=!1;function Qn(e,t){if($n||null==Gn||Gn!==l())return null;var n=Gn;return"selectionStart"in n&&zn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Kn&&c(Kn,n)?null:(Kn=n,(e=ge.getPooled(qn.select,Yn,e,t)).type="select",e.target=Gn,ee(e),e)}var Xn={eventTypes:qn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Bn(a),o=_.onSelect;for(var i=0;i<o.length;i++){var u=o[i];if(!a.hasOwnProperty(u)||!a[u]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?H(t):window,e){case"focus":(Ze(a)||"true"===a.contentEditable)&&(Gn=a,Yn=t,Kn=null);break;case"blur":Kn=Yn=Gn=null;break;case"mousedown":$n=!0;break;case"contextmenu":case"mouseup":return $n=!1,Qn(n,r);case"selectionchange":if(Hn)break;case"keydown":case"keyup":return Qn(n,r)}return null}};M.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=G.getFiberCurrentPropsFromNode,P=G.getInstanceFromNode,C=G.getNodeFromInstance,M.injectEventPluginsByName({SimpleEventPlugin:Pn,EnterLeaveEventPlugin:an,ChangeEventPlugin:Xt,SelectEventPlugin:Xn,BeforeInputEventPlugin:Ue});var Jn="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,Zn=Date,er=setTimeout,tr=clearTimeout,nr=void 0;if("object"==typeof performance&&"function"==typeof performance.now){var rr=performance;nr=function(){return rr.now()}}else nr=function(){return Zn.now()};var or=void 0,ar=void 0;if(a.canUseDOM){var ir="function"==typeof Jn?Jn:function(){p("276")},ur=null,lr=null,cr=-1,sr=!1,fr=!1,pr=0,dr=33,mr=33,hr={didTimeout:!1,timeRemaining:function(){var e=pr-nr();return 0<e?e:0}},yr=function(e,t){var n=e.scheduledCallback,r=!1;try{n(t),r=!0}finally{ar(e),r||(sr=!0,window.postMessage(vr,"*"))}},vr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===vr&&(sr=!1,null!==ur)){if(null!==ur){var t=nr();if(!(-1===cr||cr>t)){e=-1;for(var n=[],r=ur;null!==r;){var o=r.timeoutTime;-1!==o&&o<=t?n.push(r):-1!==o&&(-1===e||o<e)&&(e=o),r=r.next}if(0<n.length)for(hr.didTimeout=!0,t=0,r=n.length;t<r;t++)yr(n[t],hr);cr=e}}for(e=nr();0<pr-e&&null!==ur;)e=ur,hr.didTimeout=!1,yr(e,hr),e=nr();null===ur||fr||(fr=!0,ir(br))}},!1);var br=function(e){fr=!1;var t=e-pr+mr;t<mr&&dr<mr?(8>t&&(t=8),mr=t<dr?dr:t):dr=t,pr=e+mr,sr||(sr=!0,window.postMessage(vr,"*"))};or=function(e,t){var n=-1;return null!=t&&"number"==typeof t.timeout&&(n=nr()+t.timeout),(-1===cr||-1!==n&&n<cr)&&(cr=n),e={scheduledCallback:e,timeoutTime:n,prev:null,next:null},null===ur?ur=e:null!==(t=e.prev=lr)&&(t.next=e),lr=e,fr||(fr=!0,ir(br)),e},ar=function(e){if(null!==e.prev||ur===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,ur=t):null!==n?(n.next=null,lr=n):lr=ur=null}}}else{var Er=new Map;or=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=er(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return Er.set(e,n),t},ar=function(e){var t=Er.get(e.scheduledCallback);Er.delete(e),tr(t)}}function gr(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function _r(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function wr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Tr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Or(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function xr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Pr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Cr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Sr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Rr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Sr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var kr=void 0,Ar=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Cr.svg||"innerHTML"in e)e.innerHTML=t;else{for((kr=kr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=kr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Nr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var jr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Dr=["Webkit","ms","Moz","O"];function Mr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||jr.hasOwnProperty(o)&&jr[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(jr).forEach(function(e){Dr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),jr[t]=jr[e]})});var Ir=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ur(e,t,n){t&&(Ir[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function Vr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Lr=u.thatReturns("");function Br(e,t){var n=Bn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=_[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":jn("scroll",e);break;case"focus":case"blur":jn("focus",e),jn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":tt(o,!0)&&jn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===pe.indexOf(o)&&Nn(o,e)}n[o]=!0}}}function Fr(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Cr.html&&(r=Sr(e)),r===Cr.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function Wr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function zr(e,t,n,r){var o=Vr(t,n);switch(t){case"iframe":case"object":Nn("load",e);var a=n;break;case"video":case"audio":for(a=0;a<pe.length;a++)Nn(pe[a],e);a=n;break;case"source":Nn("error",e),a=n;break;case"img":case"image":case"link":Nn("error",e),Nn("load",e),a=n;break;case"form":Nn("reset",e),Nn("submit",e),a=n;break;case"details":Nn("toggle",e),a=n;break;case"input":At(e,n),a=kt(e,n),Nn("invalid",e),Br(r,"onChange");break;case"option":a=gr(e,n);break;case"select":wr(e,n),a=i({},n,{value:void 0}),Nn("invalid",e),Br(r,"onChange");break;case"textarea":Or(e,n),a=Tr(e,n),Nn("invalid",e),Br(r,"onChange");break;default:a=n}Ur(t,a,Lr);var l,c=a;for(l in c)if(c.hasOwnProperty(l)){var s=c[l];"style"===l?Mr(e,s):"dangerouslySetInnerHTML"===l?null!=(s=s?s.__html:void 0)&&Ar(e,s):"children"===l?"string"==typeof s?("textarea"!==t||""!==s)&&Nr(e,s):"number"==typeof s&&Nr(e,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(g.hasOwnProperty(l)?null!=s&&Br(r,l):null!=s&&Rt(e,l,s,o))}switch(t){case"input":rt(e),Dt(e,n,!1);break;case"textarea":rt(e),Pr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?_r(e,!!n.multiple,t,!1):null!=n.defaultValue&&_r(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=u)}}function Hr(e,t,n,r,o){var a=null;switch(t){case"input":n=kt(e,n),r=kt(e,r),a=[];break;case"option":n=gr(e,n),r=gr(e,r),a=[];break;case"select":n=i({},n,{value:void 0}),r=i({},r,{value:void 0}),a=[];break;case"textarea":n=Tr(e,n),r=Tr(e,r),a=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=u)}Ur(t,r,Lr),t=e=void 0;var l=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var c=n[e];for(t in c)c.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(g.hasOwnProperty(e)?a||(a=[]):(a=a||[]).push(e,null));for(e in r){var s=r[e];if(c=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&s!==c&&(null!=s||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||s&&s.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in s)s.hasOwnProperty(t)&&c[t]!==s[t]&&(l||(l={}),l[t]=s[t])}else l||(a||(a=[]),a.push(e,l)),l=s;else"dangerouslySetInnerHTML"===e?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(a=a||[]).push(e,""+s)):"children"===e?c===s||"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(e,""+s):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(g.hasOwnProperty(e)?(null!=s&&Br(o,e),a||c===s||(a=[])):(a=a||[]).push(e,s))}return l&&(a=a||[]).push("style",l),a}function qr(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Nt(e,o),Vr(n,r),r=Vr(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],u=t[a+1];"style"===i?Mr(e,u):"dangerouslySetInnerHTML"===i?Ar(e,u):"children"===i?Nr(e,u):Rt(e,i,u,r)}switch(n){case"input":jt(e,o);break;case"textarea":xr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?_r(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?_r(e,!!o.multiple,o.defaultValue,!0):_r(e,!!o.multiple,o.multiple?[]:"",!1))}}function Gr(e,t,n,r,o){switch(t){case"iframe":case"object":Nn("load",e);break;case"video":case"audio":for(r=0;r<pe.length;r++)Nn(pe[r],e);break;case"source":Nn("error",e);break;case"img":case"image":case"link":Nn("error",e),Nn("load",e);break;case"form":Nn("reset",e),Nn("submit",e);break;case"details":Nn("toggle",e);break;case"input":At(e,n),Nn("invalid",e),Br(o,"onChange");break;case"select":wr(e,n),Nn("invalid",e),Br(o,"onChange");break;case"textarea":Or(e,n),Nn("invalid",e),Br(o,"onChange")}for(var a in Ur(t,n,Lr),r=null,n)if(n.hasOwnProperty(a)){var i=n[a];"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):g.hasOwnProperty(a)&&null!=i&&Br(o,a)}switch(t){case"input":rt(e),Dt(e,n,!0);break;case"textarea":rt(e),Pr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=u)}return r}function Yr(e,t){return e.nodeValue!==t}var Kr={createElement:Fr,createTextNode:Wr,setInitialProperties:zr,diffProperties:Hr,updateProperties:qr,diffHydratedProperties:Gr,diffHydratedText:Yr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(jt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=q(r);o||p("90"),ot(r),jt(r,o)}}}break;case"textarea":xr(e,n);break;case"select":null!=(t=n.value)&&_r(e,!!n.multiple,t,!1)}}},$r=null,Qr=null;function Xr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Jr(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var Zr=nr,eo=or,to=ar;function no(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function ro(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var oo=[],ao=-1;function io(e){return{current:e}}function uo(e){0>ao||(e.current=oo[ao],oo[ao]=null,ao--)}function lo(e,t){oo[++ao]=e.current,e.current=t}var co=io(f),so=io(!1),fo=f;function po(e){return ho(e)?fo:co.current}function mo(e,t){var n=e.type.contextTypes;if(!n)return f;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function ho(e){return 2===e.tag&&null!=e.type.childContextTypes}function yo(e){ho(e)&&(uo(so),uo(co))}function vo(e){uo(so),uo(co)}function bo(e,t,n){co.current!==f&&p("168"),lo(co,t),lo(so,n)}function Eo(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",Et(e)||"Unknown",o);return i({},t,n)}function go(e){if(!ho(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,fo=co.current,lo(co,t),lo(so,so.current),!0}function _o(e,t){var n=e.stateNode;if(n||p("169"),t){var r=Eo(e,fo);n.__reactInternalMemoizedMergedChildContext=r,uo(so),uo(co),lo(co,r)}else uo(so);lo(so,t)}function wo(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function To(e,t,n){var r=e.alternate;return null===r?((r=new wo(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Oo(e,t,n){var r=e.type,o=e.key;if(e=e.props,"function"==typeof r)var a=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)a=5;else switch(r){case ct:return xo(e.children,t,n,o);case mt:a=11,t|=3;break;case st:a=11,t|=2;break;case ft:return(r=new wo(15,e,o,4|t)).type=ft,r.expirationTime=n,r;case yt:a=16,t|=2;break;default:e:{switch("object"==typeof r&&null!==r?r.$$typeof:null){case pt:a=13;break e;case dt:a=12;break e;case ht:a=14;break e;default:p("130",null==r?r:typeof r,"")}a=void 0}}return(t=new wo(a,e,o,t)).type=r,t.expirationTime=n,t}function xo(e,t,n,r){return(e=new wo(10,e,r,t)).expirationTime=n,e}function Po(e,t,n){return(e=new wo(6,e,null,t)).expirationTime=n,e}function Co(e,t,n){return(t=new wo(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function So(e,t,n){return e={current:t=new wo(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var Ro=null,ko=null;function Ao(e){return function(t){try{return e(t)}catch(e){}}}function No(e){"function"==typeof Ro&&Ro(e)}function jo(e){"function"==typeof ko&&ko(e)}var Do=!1;function Mo(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Io(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Uo(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Vo(e,t,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n)}function Lo(e,t,n){var r=e.alternate;if(null===r){var o=e.updateQueue,a=null;null===o&&(o=e.updateQueue=Mo(e.memoizedState))}else o=e.updateQueue,a=r.updateQueue,null===o?null===a?(o=e.updateQueue=Mo(e.memoizedState),a=r.updateQueue=Mo(r.memoizedState)):o=e.updateQueue=Io(a):null===a&&(a=r.updateQueue=Io(o));null===a||o===a?Vo(o,t,n):null===o.lastUpdate||null===a.lastUpdate?(Vo(o,t,n),Vo(a,t,n)):(Vo(o,t,n),a.lastUpdate=t)}function Bo(e,t,n){var r=e.updateQueue;null===(r=null===r?e.updateQueue=Mo(e.memoizedState):Fo(e,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=t:(r.lastCapturedUpdate.next=t,r.lastCapturedUpdate=t),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function Fo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Io(t)),t}function Wo(e,t,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(o="function"==typeof(e=n.payload)?e.call(a,r,o):e)||void 0===o)break;return i({},r,o);case 2:Do=!0}return r}function zo(e,t,n,r,o){if(Do=!1,!(0===t.expirationTime||t.expirationTime>o)){for(var a=(t=Fo(e,t)).baseState,i=null,u=0,l=t.firstUpdate,c=a;null!==l;){var s=l.expirationTime;s>o?(null===i&&(i=l,a=c),(0===u||u>s)&&(u=s)):(c=Wo(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f>o?(null===s&&(s=l,null===i&&(a=c)),(0===u||u>f)&&(u=f)):(c=Wo(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===i&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===s&&(a=c),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=s,t.expirationTime=u,e.memoizedState=c}}function Ho(e,t){"function"!=typeof e&&p("191",e),e.call(t)}function qo(e,t,n){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var r=e.callback;null!==r&&(e.callback=null,Ho(r,n)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Ho(t,n)),e=e.nextEffect}function Go(e,t){return{value:e,source:t,stack:gt(t)}}var Yo=io(null),Ko=io(null),$o=io(0);function Qo(e){var t=e.type._context;lo($o,t._changedBits),lo(Ko,t._currentValue),lo(Yo,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function Xo(e){var t=$o.current,n=Ko.current;uo(Yo),uo(Ko),uo($o),(e=e.type._context)._currentValue=n,e._changedBits=t}var Jo={},Zo=io(Jo),ea=io(Jo),ta=io(Jo);function na(e){return e===Jo&&p("174"),e}function ra(e,t){lo(ta,t),lo(ea,e),lo(Zo,Jo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Rr(null,"");break;default:t=Rr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}uo(Zo),lo(Zo,t)}function oa(e){uo(Zo),uo(ea),uo(ta)}function aa(e){ea.current===e&&(uo(Zo),uo(ea))}function ia(e,t,n){var r=e.memoizedState;r=null===(t=t(n,r))||void 0===t?r:i({},r,t),e.memoizedState=r,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=r)}var ua={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===un(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ei(),o=Uo(r=vi(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Lo(e,o,r),bi(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ei(),o=Uo(r=vi(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Lo(e,o,r),bi(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ei(),r=Uo(n=vi(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Lo(e,r,n),bi(e,n)}};function la(e,t,n,r,o,a){var i=e.stateNode;return e=e.type,"function"==typeof i.shouldComponentUpdate?i.shouldComponentUpdate(n,o,a):!e.prototype||!e.prototype.isPureReactComponent||(!c(t,n)||!c(r,o))}function ca(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ua.enqueueReplaceState(t,t.state,null)}function sa(e,t){var n=e.type,r=e.stateNode,o=e.pendingProps,a=po(e);r.props=o,r.state=e.memoizedState,r.refs=f,r.context=mo(e,a),null!==(a=e.updateQueue)&&(zo(e,a,o,r,t),r.state=e.memoizedState),"function"==typeof(a=e.type.getDerivedStateFromProps)&&(ia(e,a,o),r.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&ua.enqueueReplaceState(r,r.state,null),null!==(a=e.updateQueue)&&(zo(e,a,o,r,t),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var fa=Array.isArray;function pa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function da(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ma(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=To(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Po(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=pa(e,t,n),r.return=e,r):((r=Oo(n,e.mode,r)).ref=pa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Co(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function s(e,t,n,r,a){return null===t||10!==t.tag?((t=xo(n,e.mode,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Po(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ut:return(n=Oo(t,e.mode,n)).ref=pa(e,null,t),n.return=e,n;case lt:return(t=Co(t,e.mode,n)).return=e,t}if(fa(t)||bt(t))return(t=xo(t,e.mode,n,null)).return=e,t;da(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ut:return n.key===o?n.type===ct?s(e,t,n.props.children,r,o):l(e,t,n,r):null;case lt:return n.key===o?c(e,t,n,r):null}if(fa(n)||bt(n))return null!==o?null:s(e,t,n,r,null);da(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ut:return e=e.get(null===r.key?n:r.key)||null,r.type===ct?s(t,e,r.props.children,o,r.key):l(t,e,r,o);case lt:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(fa(r)||bt(r))return s(t,e=e.get(n)||null,r,o,null);da(t,r)}return null}function h(o,i,u,l){for(var c=null,s=null,p=i,h=i=0,y=null;null!==p&&h<u.length;h++){p.index>h?(y=p,p=null):y=p.sibling;var v=d(o,p,u[h],l);if(null===v){null===p&&(p=y);break}e&&p&&null===v.alternate&&t(o,p),i=a(v,i,h),null===s?c=v:s.sibling=v,s=v,p=y}if(h===u.length)return n(o,p),c;if(null===p){for(;h<u.length;h++)(p=f(o,u[h],l))&&(i=a(p,i,h),null===s?c=p:s.sibling=p,s=p);return c}for(p=r(o,p);h<u.length;h++)(y=m(p,o,h,u[h],l))&&(e&&null!==y.alternate&&p.delete(null===y.key?h:y.key),i=a(y,i,h),null===s?c=y:s.sibling=y,s=y);return e&&p.forEach(function(e){return t(o,e)}),c}function y(o,i,u,l){var c=bt(u);"function"!=typeof c&&p("150"),null==(u=c.call(u))&&p("151");for(var s=c=null,h=i,y=i=0,v=null,b=u.next();null!==h&&!b.done;y++,b=u.next()){h.index>y?(v=h,h=null):v=h.sibling;var E=d(o,h,b.value,l);if(null===E){h||(h=v);break}e&&h&&null===E.alternate&&t(o,h),i=a(E,i,y),null===s?c=E:s.sibling=E,s=E,h=v}if(b.done)return n(o,h),c;if(null===h){for(;!b.done;y++,b=u.next())null!==(b=f(o,b.value,l))&&(i=a(b,i,y),null===s?c=b:s.sibling=b,s=b);return c}for(h=r(o,h);!b.done;y++,b=u.next())null!==(b=m(h,o,y,b.value,l))&&(e&&null!==b.alternate&&h.delete(null===b.key?y:b.key),i=a(b,i,y),null===s?c=b:s.sibling=b,s=b);return e&&h.forEach(function(e){return t(o,e)}),c}return function(e,r,a,u){var l="object"==typeof a&&null!==a&&a.type===ct&&null===a.key;l&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case ut:e:{for(c=a.key,l=r;null!==l;){if(l.key===c){if(10===l.tag?a.type===ct:l.type===a.type){n(e,l.sibling),(r=o(l,a.type===ct?a.props.children:a.props,u)).ref=pa(e,l,a),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}a.type===ct?((r=xo(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Oo(a,e.mode,u)).ref=pa(e,r,a),u.return=e,e=u)}return i(e);case lt:e:{for(l=a.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Co(a,e.mode,u)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a,u)).return=e,e=r):(n(e,r),(r=Po(a,e.mode,u)).return=e,e=r),i(e);if(fa(a))return h(e,r,a,u);if(bt(a))return y(e,r,a,u);if(c&&da(e,a),void 0===a&&!l)switch(e.tag){case 2:case 1:p("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var ha=ma(!0),ya=ma(!1),va=null,ba=null,Ea=!1;function ga(e,t){var n=new wo(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function _a(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function wa(e){if(Ea){var t=ba;if(t){var n=t;if(!_a(e,t)){if(!(t=no(n))||!_a(e,t))return e.effectTag|=2,Ea=!1,void(va=e);ga(va,n)}va=e,ba=ro(t)}else e.effectTag|=2,Ea=!1,va=e}}function Ta(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;va=e}function Oa(e){if(e!==va)return!1;if(!Ea)return Ta(e),Ea=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Jr(t,e.memoizedProps))for(t=ba;t;)ga(e,t),t=no(t);return Ta(e),ba=va?no(e.stateNode):null,!0}function xa(){ba=va=null,Ea=!1}function Pa(e,t,n){Ca(e,t,n,t.expirationTime)}function Ca(e,t,n,r){t.child=null===e?ya(t,null,n,r):ha(t,e.child,n,r)}function Sa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ra(e,t,n,r,o){Sa(e,t);var a=0!=(64&t.effectTag);if(!n&&!a)return r&&_o(t,!1),Na(e,t);n=t.stateNode,at.current=t;var i=a?null:n.render();return t.effectTag|=1,a&&(Ca(e,t,null,o),t.child=null),Ca(e,t,i,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&_o(t,!0),t.child}function ka(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),ra(e,t.containerInfo)}function Aa(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(a=o;null!==a;){var i=a.alternate;if(0===a.expirationTime||a.expirationTime>r)a.expirationTime=r,null!==i&&(0===i.expirationTime||i.expirationTime>r)&&(i.expirationTime=r);else{if(null===i||!(0===i.expirationTime||i.expirationTime>r))break;i.expirationTime=r}a=a.return}a=null}else a=o.child;break;case 13:a=o.type===e.type?null:o.child;break;default:a=o.child}if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===e){a=null;break}if(null!==(o=a.sibling)){o.return=a.return,a=o;break}a=a.return}o=a}}function Na(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=To(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=To(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ja(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:ka(t);break;case 2:go(t);break;case 4:ra(t,t.stateNode.containerInfo);break;case 13:Qo(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,a=po(t);return r=r(o,a=mo(t,a)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(a=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof(a=a.getDerivedStateFromProps)&&ia(t,a,o),o=go(t),r.updater=ua,t.stateNode=r,r._reactInternalFiber=t,sa(t,n),e=Ra(e,t,!0,o,n)):(t.tag=1,Pa(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,so.current||t.memoizedProps!==n?(o=o(n,r=mo(t,r=po(t))),t.effectTag|=1,Pa(e,t,o),t.memoizedProps=n,e=t.child):e=Na(e,t),e;case 2:if(o=go(t),null===e)if(null===t.stateNode){var i=t.pendingProps,u=t.type;r=po(t);var l=2===t.tag&&null!=t.type.contextTypes;i=new u(i,a=l?mo(t,r):f),t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,i.updater=ua,t.stateNode=i,i._reactInternalFiber=t,l&&((l=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,l.__reactInternalMemoizedMaskedChildContext=a),sa(t,n),r=!0}else{u=t.type,r=t.stateNode,l=t.memoizedProps,a=t.pendingProps,r.props=l;var c=r.context;i=mo(t,i=po(t));var s=u.getDerivedStateFromProps;(u="function"==typeof s||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(l!==a||c!==i)&&ca(t,r,a,i),Do=!1;var d=t.memoizedState;c=r.state=d;var m=t.updateQueue;null!==m&&(zo(t,m,a,r,n),c=t.memoizedState),l!==a||d!==c||so.current||Do?("function"==typeof s&&(ia(t,s,a),c=t.memoizedState),(l=Do||la(t,l,a,d,c,i))?(u||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||("function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount()),"function"==typeof r.componentDidMount&&(t.effectTag|=4)):("function"==typeof r.componentDidMount&&(t.effectTag|=4),t.memoizedProps=a,t.memoizedState=c),r.props=a,r.state=c,r.context=i,r=l):("function"==typeof r.componentDidMount&&(t.effectTag|=4),r=!1)}else u=t.type,r=t.stateNode,a=t.memoizedProps,l=t.pendingProps,r.props=a,c=r.context,i=mo(t,i=po(t)),(u="function"==typeof(s=u.getDerivedStateFromProps)||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(a!==l||c!==i)&&ca(t,r,l,i),Do=!1,c=t.memoizedState,d=r.state=c,null!==(m=t.updateQueue)&&(zo(t,m,l,r,n),d=t.memoizedState),a!==l||c!==d||so.current||Do?("function"==typeof s&&(ia(t,s,l),d=t.memoizedState),(s=Do||la(t,a,l,c,d,i))?(u||"function"!=typeof r.UNSAFE_componentWillUpdate&&"function"!=typeof r.componentWillUpdate||("function"==typeof r.componentWillUpdate&&r.componentWillUpdate(l,d,i),"function"==typeof r.UNSAFE_componentWillUpdate&&r.UNSAFE_componentWillUpdate(l,d,i)),"function"==typeof r.componentDidUpdate&&(t.effectTag|=4),"function"==typeof r.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof r.componentDidUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=l,t.memoizedState=d),r.props=l,r.state=d,r.context=i,r=s):("function"!=typeof r.componentDidUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),r=!1);return Ra(e,t,r,o,n);case 3:return ka(t),null!==(o=t.updateQueue)?(r=null!==(r=t.memoizedState)?r.element:null,zo(t,o,t.pendingProps,null,n),(o=t.memoizedState.element)===r?(xa(),e=Na(e,t)):(r=t.stateNode,(r=(null===e||null===e.child)&&r.hydrate)&&(ba=ro(t.stateNode.containerInfo),va=t,r=Ea=!0),r?(t.effectTag|=2,t.child=ya(t,null,o,n)):(xa(),Pa(e,t,o)),e=t.child)):(xa(),e=Na(e,t)),e;case 5:return na(ta.current),(o=na(Zo.current))!==(r=Rr(o,t.type))&&(lo(ea,t),lo(Zo,r)),null===e&&wa(t),o=t.type,l=t.memoizedProps,r=t.pendingProps,a=null!==e?e.memoizedProps:null,so.current||l!==r||((l=1&t.mode&&!!r.hidden)&&(t.expirationTime=1073741823),l&&1073741823===n)?(l=r.children,Jr(o,r)?l=null:a&&Jr(o,a)&&(t.effectTag|=16),Sa(e,t),1073741823!==n&&1&t.mode&&r.hidden?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(Pa(e,t,l),t.memoizedProps=r,e=t.child)):e=Na(e,t),e;case 6:return null===e&&wa(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return ra(t,t.stateNode.containerInfo),o=t.pendingProps,so.current||t.memoizedProps!==o?(null===e?t.child=ha(t,null,o,n):Pa(e,t,o),t.memoizedProps=o,e=t.child):e=Na(e,t),e;case 14:return o=t.type.render,n=t.pendingProps,r=t.ref,so.current||t.memoizedProps!==n||r!==(null!==e?e.ref:null)?(Pa(e,t,o=o(n,r)),t.memoizedProps=n,e=t.child):e=Na(e,t),e;case 10:return n=t.pendingProps,so.current||t.memoizedProps!==n?(Pa(e,t,n),t.memoizedProps=n,e=t.child):e=Na(e,t),e;case 11:return n=t.pendingProps.children,so.current||null!==n&&t.memoizedProps!==n?(Pa(e,t,n),t.memoizedProps=n,e=t.child):e=Na(e,t),e;case 15:return n=t.pendingProps,t.memoizedProps===n?e=Na(e,t):(Pa(e,t,n.children),t.memoizedProps=n,e=t.child),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,a=t.memoizedProps,i=!0;if(so.current)i=!1;else if(a===o)return t.stateNode=0,Qo(t),Na(e,t);var u=o.value;if(t.memoizedProps=o,null===a)u=1073741823;else if(a.value===o.value){if(a.children===o.children&&i)return t.stateNode=0,Qo(t),Na(e,t);u=0}else{var l=a.value;if(l===u&&(0!==l||1/l==1/u)||l!=l&&u!=u){if(a.children===o.children&&i)return t.stateNode=0,Qo(t),Na(e,t);u=0}else if(u="function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,u):1073741823,0==(u|=0)){if(a.children===o.children&&i)return t.stateNode=0,Qo(t),Na(e,t)}else Aa(t,r,u,n)}return t.stateNode=u,Qo(t),Pa(e,t,o.children),t.child}(e,t,n);case 12:e:if(r=t.type,a=t.pendingProps,l=t.memoizedProps,o=r._currentValue,i=r._changedBits,so.current||0!==i||l!==a){if(t.memoizedProps=a,void 0!==(u=a.unstable_observedBits)&&null!==u||(u=1073741823),t.stateNode=u,0!=(i&u))Aa(t,r,i,n);else if(l===a){e=Na(e,t);break e}n=(n=a.children)(o),t.effectTag|=1,Pa(e,t,n),e=t.child}else e=Na(e,t);return e;default:p("156")}}function Da(e){e.effectTag|=4}var Ma=void 0,Ia=void 0,Ua=void 0;function Va(e,t){var n=t.pendingProps;switch(t.tag){case 1:return null;case 2:return yo(t),null;case 3:oa(),vo();var r=t.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Oa(t),t.effectTag&=-3),Ma(t),null;case 5:aa(t),r=na(ta.current);var o=t.type;if(null!==e&&null!=t.stateNode){var a=e.memoizedProps,i=t.stateNode,u=na(Zo.current);i=Hr(i,o,a,n,r),Ia(e,t,i,o,a,n,r,u),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!n)return null===t.stateNode&&p("166"),null;if(e=na(Zo.current),Oa(t))n=t.stateNode,o=t.type,a=t.memoizedProps,n[F]=t,n[W]=a,r=Gr(n,o,a,e,r),t.updateQueue=r,null!==r&&Da(t);else{(e=Fr(o,n,r,e))[F]=t,e[W]=n;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}zr(e,o,n,r),Xr(o,n)&&Da(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ua(e,t,e.memoizedProps,n);else{if("string"!=typeof n)return null===t.stateNode&&p("166"),null;r=na(ta.current),na(Zo.current),Oa(t)?(r=t.stateNode,n=t.memoizedProps,r[F]=t,Yr(r,n)&&Da(t)):((r=Wr(n,r))[F]=t,t.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return oa(),Ma(t),null;case 13:return Xo(t),null;case 12:return null;case 0:p("167");default:p("156")}}function La(e,t){var n=t.source;null===t.stack&&null!==n&&gt(n),null!==n&&Et(n),t=t.value,null!==e&&2===e.tag&&Et(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function Ba(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){hi(e,t)}else t.current=null}function Fa(e){switch(jo(e),e.tag){case 2:Ba(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){hi(e,t)}break;case 5:Ba(e);break;case 4:Ha(e)}}function Wa(e){return 5===e.tag||3===e.tag||4===e.tag}function za(e){e:{for(var t=e.return;null!==t;){if(Wa(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(Nr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Wa(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var a=t,i=o.stateNode,u=n;8===a.nodeType?a.parentNode.insertBefore(i,u):a.insertBefore(i,u)}else t.insertBefore(o.stateNode,n);else r?(a=t,i=o.stateNode,8===a.nodeType?a.parentNode.insertBefore(i,a):a.appendChild(i)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Ha(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var a=t,i=a;;)if(Fa(i),null!==i.child&&4!==i.tag)i.child.return=i,i=i.child;else{if(i===a)break;for(;null===i.sibling;){if(null===i.return||i.return===a)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}o?(a=r,i=t.stateNode,8===a.nodeType?a.parentNode.removeChild(i):a.removeChild(i)):r.removeChild(t.stateNode)}else if(4===t.tag?r=t.stateNode.containerInfo:Fa(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function qa(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&(n[W]=r,qr(n,a,o,e,r))}break;case 6:null===t.stateNode&&p("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:p("163")}}function Ga(e,t,n){(n=Uo(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ji(r),La(e,t)},n}function Ya(e,t,n){(n=Uo(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===si?si=new Set([this]):si.add(this);var n=t.value,r=t.stack;La(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Ka(e,t,n,r,o,a){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=Go(r,n),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void Bo(e,r=Ga(e,r,a),a);case 2:if(t=r,n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===si||!si.has(n)))return e.effectTag|=1024,void Bo(e,r=Ya(e,t,a),a)}e=e.return}while(null!==e)}function $a(e){switch(e.tag){case 2:yo(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return oa(),vo(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return aa(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return oa(),null;case 13:return Xo(e),null;default:return null}}Ma=function(){},Ia=function(e,t,n){(t.updateQueue=n)&&Da(t)},Ua=function(e,t,n,r){n!==r&&Da(t)};var Qa=Zr(),Xa=2,Ja=Qa,Za=0,ei=0,ti=!1,ni=null,ri=null,oi=0,ai=-1,ii=!1,ui=null,li=!1,ci=!1,si=null;function fi(){if(null!==ni)for(var e=ni.return;null!==e;){var t=e;switch(t.tag){case 2:yo(t);break;case 3:oa(),vo();break;case 5:aa(t);break;case 4:oa();break;case 13:Xo(t)}e=e.return}ri=null,oi=0,ai=-1,ii=!1,ni=null,ci=!1}function pi(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=Va(t,e);var o=e;if(1073741823===oi||1073741823!==o.expirationTime){var a=0;switch(o.tag){case 3:case 2:var i=o.updateQueue;null!==i&&(a=i.expirationTime)}for(i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ci=!0;break}e=n}else{if(null!==(e=$a(e)))return e.effectTag&=511,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function di(e){var t=ja(e.alternate,e,oi);return null===t&&(t=pi(e)),at.current=null,t}function mi(e,t,n){ti&&p("243"),ti=!0,t===oi&&e===ri&&null!==ni||(fi(),oi=t,ai=-1,ni=To((ri=e).current,null,oi),e.pendingCommitExpirationTime=0);var r=!1;for(ii=!n||oi<=Xa;;){try{if(n)for(;null!==ni&&!Xi();)ni=di(ni);else for(;null!==ni;)ni=di(ni)}catch(t){if(null===ni)r=!0,Ji(t);else{null===ni&&p("271");var o=(n=ni).return;if(null===o){r=!0,Ji(t);break}Ka(e,o,n,t,0,oi),ni=pi(n)}}break}if(ti=!1,r)return null;if(null===ni){if(ci)return e.pendingCommitExpirationTime=t,e.current.alternate;ii&&p("262"),0<=ai&&setTimeout(function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&Wi(e,t)},ai),function(e){null===Ci&&p("246"),Ci.remainingExpirationTime=e}(e.current.expirationTime)}return null}function hi(e,t){var n;e:{for(ti&&!li&&p("263"),n=e.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===si||!si.has(r))){Lo(n,e=Ya(n,e=Go(t,e),1),1),bi(n,1),n=void 0;break e}break;case 3:Lo(n,e=Ga(n,e=Go(t,e),1),1),bi(n,1),n=void 0;break e}n=n.return}3===e.tag&&(Lo(e,n=Ga(e,n=Go(t,e),1),1),bi(e,1)),n=void 0}return n}function yi(){var e=2+25*(1+((Ei()-2+500)/25|0));return e<=Za&&(e=Za+1),Za=e}function vi(e,t){return e=0!==ei?ei:ti?li?1:oi:1&t.mode?Ii?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Ii&&(0===Ri||e>Ri)&&(Ri=e),e}function bi(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!ti&&0!==oi&&t<oi&&fi();var r=n.current.expirationTime;ti&&!li&&ri===n||Wi(n,r),Li>Vi&&p("185")}e=e.return}}function Ei(){return Ja=Zr()-Qa,Xa=2+(Ja/10|0)}function gi(e){var t=ei;ei=2+25*(1+((Ei()-2+500)/25|0));try{return e()}finally{ei=t}}function _i(e,t,n,r,o){var a=ei;ei=1;try{return e(t,n,r,o)}finally{ei=a}}var wi=null,Ti=null,Oi=0,xi=void 0,Pi=!1,Ci=null,Si=0,Ri=0,ki=!1,Ai=!1,Ni=null,ji=null,Di=!1,Mi=!1,Ii=!1,Ui=null,Vi=1e3,Li=0,Bi=1;function Fi(e){if(0!==Oi){if(e>Oi)return;null!==xi&&to(xi)}var t=Zr()-Qa;Oi=e,xi=eo(Hi,{timeout:10*(e-2)-t})}function Wi(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===Ti?(wi=Ti=e,e.nextScheduledRoot=e):(Ti=Ti.nextScheduledRoot=e).nextScheduledRoot=wi;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}Pi||(Di?Mi&&(Ci=e,Si=1,$i(e,1,!1)):1===t?qi():Fi(t))}function zi(){var e=0,t=null;if(null!==Ti)for(var n=Ti,r=wi;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===Ti)&&p("244"),r===r.nextScheduledRoot){wi=Ti=r.nextScheduledRoot=null;break}if(r===wi)wi=o=r.nextScheduledRoot,Ti.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Ti){(Ti=n).nextScheduledRoot=wi,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===Ti)break;n=r,r=r.nextScheduledRoot}}null!==(n=Ci)&&n===t&&1===e?Li++:Li=0,Ci=t,Si=e}function Hi(e){Gi(0,!0,e)}function qi(){Gi(1,!1,null)}function Gi(e,t,n){if(ji=n,zi(),t)for(;null!==Ci&&0!==Si&&(0===e||e>=Si)&&(!ki||Ei()>=Si);)Ei(),$i(Ci,Si,!ki),zi();else for(;null!==Ci&&0!==Si&&(0===e||e>=Si);)$i(Ci,Si,!1),zi();null!==ji&&(Oi=0,xi=null),0!==Si&&Fi(Si),ji=null,ki=!1,Ki()}function Yi(e,t){Pi&&p("253"),Ci=e,Si=t,$i(e,t,!1),qi(),Ki()}function Ki(){if(Li=0,null!==Ui){var e=Ui;Ui=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Ai||(Ai=!0,Ni=e)}}}if(Ai)throw e=Ni,Ni=null,Ai=!1,e}function $i(e,t,n){Pi&&p("245"),Pi=!0,n?null!==(n=e.finishedWork)?Qi(e,n,t):null!==(n=mi(e,t,!0))&&(Xi()?e.finishedWork=n:Qi(e,n,t)):null!==(n=e.finishedWork)?Qi(e,n,t):null!==(n=mi(e,t,!1))&&Qi(e,n,t),Pi=!1}function Qi(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ui?Ui=[r]:Ui.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,li=ti=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0,Ei(),at.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var o=t.firstEffect}else o=t;else o=t.firstEffect;$r=kn;var a=l();if(zn(a)){if("selectionStart"in a)var i={start:a.selectionStart,end:a.selectionEnd};else e:{var u=window.getSelection&&window.getSelection();if(u&&0!==u.rangeCount){i=u.anchorNode;var c=u.anchorOffset,f=u.focusNode;u=u.focusOffset;try{i.nodeType,f.nodeType}catch(e){i=null;break e}var d=0,m=-1,h=-1,y=0,v=0,b=a,E=null;t:for(;;){for(var g;b!==i||0!==c&&3!==b.nodeType||(m=d+c),b!==f||0!==u&&3!==b.nodeType||(h=d+u),3===b.nodeType&&(d+=b.nodeValue.length),null!==(g=b.firstChild);)E=b,b=g;for(;;){if(b===a)break t;if(E===i&&++y===c&&(m=d),E===f&&++v===u&&(h=d),null!==(g=b.nextSibling))break;E=(b=E).parentNode}b=g}i=-1===m||-1===h?null:{start:m,end:h}}else i=null}i=i||{start:0,end:0}}else i=null;for(Qr={focusedElem:a,selectionRange:i},An(!1),ui=o;null!==ui;){a=!1,i=void 0;try{for(;null!==ui;){if(256&ui.effectTag){var _=ui.alternate;switch((c=ui).tag){case 2:if(256&c.effectTag&&null!==_){var w=_.memoizedProps,T=_.memoizedState,O=c.stateNode;O.props=c.memoizedProps,O.state=c.memoizedState;var x=O.getSnapshotBeforeUpdate(w,T);O.__reactInternalSnapshotBeforeUpdate=x}break;case 3:case 5:case 6:case 4:break;default:p("163")}}ui=ui.nextEffect}}catch(e){a=!0,i=e}a&&(null===ui&&p("178"),hi(ui,i),null!==ui&&(ui=ui.nextEffect))}for(ui=o;null!==ui;){_=!1,w=void 0;try{for(;null!==ui;){var P=ui.effectTag;if(16&P&&Nr(ui.stateNode,""),128&P){var C=ui.alternate;if(null!==C){var S=C.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(14&P){case 2:za(ui),ui.effectTag&=-3;break;case 6:za(ui),ui.effectTag&=-3,qa(ui.alternate,ui);break;case 4:qa(ui.alternate,ui);break;case 8:Ha(T=ui),T.return=null,T.child=null,T.alternate&&(T.alternate.child=null,T.alternate.return=null)}ui=ui.nextEffect}}catch(e){_=!0,w=e}_&&(null===ui&&p("178"),hi(ui,w),null!==ui&&(ui=ui.nextEffect))}if(S=Qr,C=l(),P=S.focusedElem,_=S.selectionRange,C!==P&&s(document.documentElement,P)){null!==_&&zn(P)&&(C=_.start,void 0===(S=_.end)&&(S=C),"selectionStart"in P?(P.selectionStart=C,P.selectionEnd=Math.min(S,P.value.length)):window.getSelection&&(C=window.getSelection(),w=P[me()].length,S=Math.min(_.start,w),_=void 0===_.end?S:Math.min(_.end,w),!C.extend&&S>_&&(w=_,_=S,S=w),w=Wn(P,S),T=Wn(P,_),w&&T&&(1!==C.rangeCount||C.anchorNode!==w.node||C.anchorOffset!==w.offset||C.focusNode!==T.node||C.focusOffset!==T.offset)&&((O=document.createRange()).setStart(w.node,w.offset),C.removeAllRanges(),S>_?(C.addRange(O),C.extend(T.node,T.offset)):(O.setEnd(T.node,T.offset),C.addRange(O))))),C=[];for(S=P;S=S.parentNode;)1===S.nodeType&&C.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof P.focus&&P.focus(),P=0;P<C.length;P++)(S=C[P]).element.scrollLeft=S.left,S.element.scrollTop=S.top}for(Qr=null,An($r),$r=null,n.current=t,ui=o;null!==ui;){o=!1,P=void 0;try{for(C=r;null!==ui;){var R=ui.effectTag;if(36&R){var k=ui.alternate;switch(_=C,(S=ui).tag){case 2:var A=S.stateNode;if(4&S.effectTag)if(null===k)A.props=S.memoizedProps,A.state=S.memoizedState,A.componentDidMount();else{var N=k.memoizedProps,j=k.memoizedState;A.props=S.memoizedProps,A.state=S.memoizedState,A.componentDidUpdate(N,j,A.__reactInternalSnapshotBeforeUpdate)}var D=S.updateQueue;null!==D&&(A.props=S.memoizedProps,A.state=S.memoizedState,qo(S,D,A));break;case 3:var M=S.updateQueue;if(null!==M){if(w=null,null!==S.child)switch(S.child.tag){case 5:w=S.child.stateNode;break;case 2:w=S.child.stateNode}qo(S,M,w)}break;case 5:var I=S.stateNode;null===k&&4&S.effectTag&&Xr(S.type,S.memoizedProps)&&I.focus();break;case 6:case 4:case 15:case 16:break;default:p("163")}}if(128&R){S=void 0;var U=ui.ref;if(null!==U){var V=ui.stateNode;switch(ui.tag){case 5:S=V;break;default:S=V}"function"==typeof U?U(S):U.current=S}}var L=ui.nextEffect;ui.nextEffect=null,ui=L}}catch(e){o=!0,P=e}o&&(null===ui&&p("178"),hi(ui,P),null!==ui&&(ui=ui.nextEffect))}ti=li=!1,No(t.stateNode),0===(t=n.current.expirationTime)&&(si=null),e.remainingExpirationTime=t}function Xi(){return!(null===ji||ji.timeRemaining()>Bi)&&(ki=!0)}function Ji(e){null===Ci&&p("246"),Ci.remainingExpirationTime=0,Ai||(Ai=!0,Ni=e)}function Zi(e,t){var n=Di;Di=!0;try{return e(t)}finally{(Di=n)||Pi||qi()}}function eu(e,t){if(Di&&!Mi){Mi=!0;try{return e(t)}finally{Mi=!1}}return e(t)}function tu(e,t){Pi&&p("187");var n=Di;Di=!0;try{return _i(e,t)}finally{Di=n,qi()}}function nu(e,t,n){if(Ii)return e(t,n);Di||Pi||0===Ri||(Gi(Ri,!1,null),Ri=0);var r=Ii,o=Di;Di=Ii=!0;try{return e(t,n)}finally{Ii=r,(Di=o)||Pi||qi()}}function ru(e){var t=Di;Di=!0;try{_i(e)}finally{(Di=t)||Pi||Gi(1,!1,null)}}function ou(e,t,n,r,o){var a=t.current;if(n){var i;n=n._reactInternalFiber;e:{for(2===un(n)&&2===n.tag||p("170"),i=n;3!==i.tag;){if(ho(i)){i=i.stateNode.__reactInternalMemoizedMergedChildContext;break e}(i=i.return)||p("171")}i=i.stateNode.context}n=ho(n)?Eo(n,i):i}else n=f;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Uo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Lo(a,o,r),bi(a,r),r}function au(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=sn(t))?null:e.stateNode}function iu(e,t,n,r){var o=t.current;return ou(e,t,n,o=vi(Ei(),o),r)}function uu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function lu(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ro=Ao(function(e){return t.onCommitFiberRoot(n,e)}),ko=Ao(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(i({},e,{findHostInstanceByFiber:function(e){return null===(e=sn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var cu=Zi,su=nu,fu=function(){Pi||0===Ri||(Gi(Ri,!1,null),Ri=0)};function pu(e){this._expirationTime=yi(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function du(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function mu(e,t,n){this._internalRoot=So(e,t,n)}function hu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function yu(e,t,n,r,o){hu(n)||p("200");var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=uu(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new mu(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=uu(a._internalRoot);u.call(e)}}eu(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return uu(a._internalRoot)}function vu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return hu(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:lt,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Le.injectFiberControlledHostComponent(Kr),pu.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new du;return ou(e,t,null,n,r._onCommit),r},pu.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},pu.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Yi(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},pu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},du.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},du.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},mu.prototype.render=function(e,t){var n=this._internalRoot,r=new du;return null!==(t=void 0===t?null:t)&&r.then(t),iu(e,n,null,r._onCommit),r},mu.prototype.unmount=function(e){var t=this._internalRoot,n=new du;return null!==(e=void 0===e?null:e)&&n.then(e),iu(null,t,null,n._onCommit),n},mu.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new du;return null!==(n=void 0===n?null:n)&&o.then(n),iu(t,r,e,o._onCommit),o},mu.prototype.createBatch=function(){var e=new pu(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ye=cu,Ke=su,$e=fu;var bu={createPortal:vu,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:au(e)},hydrate:function(e,t,n){return yu(null,e,t,!0,n)},render:function(e,t,n){return yu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),yu(e,t,n,!1,r)},unmountComponentAtNode:function(e){return hu(e)||p("40"),!!e._reactRootContainer&&(eu(function(){yu(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return vu.apply(void 0,arguments)},unstable_batchedUpdates:Zi,unstable_deferredUpdates:gi,unstable_interactiveUpdates:nu,flushSync:tu,unstable_flushControlled:ru,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:L,EventPluginRegistry:O,EventPropagators:ne,ReactControlledComponent:Ge,ReactDOMComponentTree:G,ReactDOMEventListener:In},unstable_createRoot:function(e,t){return new mu(e,!0,null!=t&&!0===t.hydrate)}};lu({findFiberByHostInstance:z,bundleType:0,version:"16.4.2",rendererPackageName:"react-dom"});var Eu={default:bu},gu=Eu&&bu||Eu;e.exports=gu.default?gu.default:gu},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},function(e,t,n){"use strict";var r=n(85);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=n(86);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7),o=n(88),a=u(n(89)),i=u(n(93));function u(e){return e&&e.__esModule?e:{default:e}}var l=(0,r.createStore)(a.default,(0,o.composeWithDevTools)(),(0,r.applyMiddleware)(i.default));t.default=l},function(e,t,n){"use strict";var r=n(7).compose;t.__esModule=!0,t.composeWithDevTools="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?r:r.apply(null,arguments)},t.devToolsEnhancer="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__:function(){return function(e){return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7),o=u(n(90)),a=u(n(91)),i=u(n(92));function u(e){return e&&e.__esModule?e:{default:e}}var l=(0,r.combineReducers)({personalData:o.default,addRemove:a.default,app:i.default});t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(8));var a={name:"",metatype:"",ethnicity:"",age:"0",sex:"",height:"0",weight:"0",streetCred:"0",notoriety:"0",publicAwareness:"0",karma:"0",totalKarma:"0",misc:"",body:"0",agility:"0",reaction:"0",strength:"0",willpower:"0",logic:"0",intuition:"0",charisma:"0",edge:"0",essence:"0",magic:"0",initiative:"0",matrixInitiative:"0",astralInitiative:"0",composure:"0",judgeIntentions:"0",memory:"0",lift:"0",movement:"0"};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a,t=arguments[1];switch(t.type){case o.RETRIEVE_AND_SET_PERSONAL:var n=r({},t.payload[0]);return console.log("PERSONAL STATE AT THIS MOMENT",a),console.log("RETRIEVE_AND_SET_PERSONAL",n),n;case o.SAVE_PERSONAL:return{name:document.getElementById("name").value,metatype:document.getElementById("metatype").value,ethnicity:document.getElementById("ethnicity").value,age:document.getElementById("age").value,sex:document.getElementById("sex").value,height:document.getElementById("height").value,weight:document.getElementById("weight").value,streetCred:document.getElementById("streetCred").value,notoriety:document.getElementById("notoriety").value,publicAwareness:document.getElementById("publicAwareness").value,karma:document.getElementById("karma").value,totalKarma:document.getElementById("totalKarma").value,misc:document.getElementById("misc").value,body:document.getElementById("body").value,agility:document.getElementById("agility").value,reaction:document.getElementById("reaction").value,strength:document.getElementById("strength").value,willpower:document.getElementById("willpower").value,logic:document.getElementById("logic").value,intuition:document.getElementById("intuition").value,charisma:document.getElementById("charisma").value,edge:document.getElementById("edge").value,essence:document.getElementById("essence").value,magic:document.getElementById("magic").value,initiative:document.getElementById("initiative").value,matrixInitiative:document.getElementById("matrixInitiative").value,astralInitiative:document.getElementById("astralInitiative").value,composure:document.getElementById("composure").value,judgeIntentions:document.getElementById("judgeIntentions").value,memory:document.getElementById("memory").value,lift:document.getElementById("lift").value,movement:document.getElementById("movement").value};default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(8));var a={armorArray:[],augmentationArray:[],contactArray:[],cyberdeckArray:[],gearArray:[],meleeWeaponArray:[],powerArray:[],qualityArray:[],rangedWeaponArray:[],skillArray:[],spellArray:[],vehicleArray:[],curMeleeWeapon:{},curRangedWeapon:{},curSpell:{},curArmor:{}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a,t=arguments[1],n=void 0;switch(t.type){case o.RETRIEVE_AND_SET_ADDREMOVE:return r({},t.payload[0]);case o.ADD_MELEEWEAPON:return(n=e.meleeWeaponArray.slice()).push(t.payload),r({},e,{meleeWeaponArray:n});case o.ADD_RANGEDWEAPON:return(n=e.rangedWeaponArray.slice()).push(t.payload),r({},e,{rangedWeaponArray:n});case o.ADD_ARMOR:return(n=e.armorArray.slice()).push(t.payload),r({},e,{armorArray:n});case o.ADD_AUGMENTATION:return(n=e.augmentationArray.slice()).push(t.payload),r({},e,{augmentationArray:n});case o.ADD_CONTACT:return(n=e.contactArray.slice()).push(t.payload),r({},e,{contactArray:n});case o.ADD_CYBERDECK:return(n=e.cyberdeckArray.slice()).push(t.payload),r({},e,{cyberdeckArray:n});case o.ADD_GEAR:return(n=e.gearArray.slice()).push(t.payload),r({},e,{gearArray:n});case o.ADD_POWER:return(n=e.powerArray.slice()).push(t.payload),r({},e,{powerArray:n});case o.ADD_QUALITY:return(n=e.qualityArray.slice()).push(t.payload),r({},e,{qualityArray:n});case o.ADD_SKILL:return(n=e.skillArray.slice()).push(t.payload),r({},e,{skillArray:n});case o.ADD_SPELL:return(n=e.spellArray.slice()).push(t.payload),r({},e,{spellArray:n});case o.ADD_VEHICLE:return(n=e.vehicleArray.slice()).push(t.payload),r({},e,{vehicleArray:n});case o.REMOVE_MELEEWEAPON:return(n=e.meleeWeaponArray.slice()).splice(t.payload,1),r({},e,{meleeWeaponArray:n});case o.REMOVE_RANGEDWEAPON:return(n=e.rangedWeaponArray.slice()).splice(t.payload,1),r({},e,{rangedWeaponArray:n});case o.REMOVE_ARMOR:return(n=e.armorArray.slice()).splice(t.payload,1),r({},e,{armorArray:n});case o.REMOVE_AUGMENTATION:return(n=e.augmentationArray.slice()).splice(t.payload,1),r({},e,{augmentationArray:n});case o.REMOVE_CONTACT:return(n=e.contactArray.slice()).splice(t.payload,1),r({},e,{contactArray:n});case o.REMOVE_CYBERDECK:return(n=e.cyberdeckArray.slice()).splice(t.payload,1),r({},e,{cyberdeckArray:n});case o.REMOVE_GEAR:return(n=e.gearArray.slice()).splice(t.payload,1),r({},e,{gearArray:n});case o.REMOVE_POWER:return(n=e.powerArray.slice()).splice(t.payload,1),r({},e,{powerArray:n});case o.REMOVE_QUALITY:return(n=e.qualityArray.slice()).splice(t.payload,1),r({},e,{qualityArray:n});case o.REMOVE_SKILL:return(n=e.skillArray.slice()).splice(t.payload,1),r({},e,{skillArray:n});case o.REMOVE_SPELL:return(n=e.spellArray.slice()).splice(t.payload,1),r({},e,{spellArray:n});case o.REMOVE_VEHICLE:return(n=e.vehicleArray.slice()).splice(t.payload,1),r({},e,{vehicleArray:n});case o.SET_TO_CURRENT_MELEE:return r({},e,{curMeleeWeapon:e.meleeWeaponArray[t.payload]});case o.SET_TO_CURRENT_RANGED:return r({},e,{curRangedWeapon:e.rangedWeaponArray[t.payload]});case o.SET_TO_CURRENT_SPELL:return r({},e,{curSpell:e.spellArray[t.payload]});case o.SET_TO_CURRENT_ARMOR:return r({},e,{curArmor:e.armorArray[t.payload]});default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(8));var a={boxDisplay:"meleeWeapon",loading:!1,error:null,retrievedState:null};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a,t=arguments[1];switch(t.type){case o.BOX_CHANGE:return{boxDisplay:t.payload};case o.UPDATE_DATABASE_ENTRY:return fetch("/updateDatabase",{method:"POST",credentials:"same-origin",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(t.payload)}).then(function(e,t){t&&console.log("First error",t),e.json()}).then(function(e,t){t&&console.log("Second error",t)}).catch(function(e){console.log("Catch error",e)}),e;case o.CREATE_DATABASE_ENTRY:return fetch("/createInDatabase",{method:"POST",credentials:"same-origin",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(t.payload)}).then(function(e,t){t&&console.log("First error",t),e.json()}).then(function(e,t){t&&console.log("Second error",t)}).catch(function(e){console.log("Catch error",e)}),e;case o.RETRIEVE_DATABASE_ENTRY:return fetch("/retrieveFromDatabase",{method:"GET",credentials:"same-origin",headers:{"Content-Type":"application/json",Accept:"application/json"}}).then(function(e){return e.json()}).then(function(e){var t=e;console.log("Retrieved Sate",t)}).catch(function(e){console.log("fetch failed",e)}),r({},t.payload[0]);case o.FETCH_PRODUCTS_BEGIN:return r({},e,{loading:!0,error:null});case o.FETCH_PRODUCTS_SUCCESS:return r({},e,{loading:!1,retrievedState:t.payload});case o.FETCH_PRODUCTS_FAILURE:return r({},e,{loading:!1,error:t.payload.error,items:[]});default:return e}}},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}n.r(t);var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){var r=n(95);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(96)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),a=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),i=null,u=0,l=[],c=n(97);function s(e,t){for(var n=0;n<e.length;n++){var o=e[n],a=r[o.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](o.parts[i]);for(;i<o.parts.length;i++)a.parts.push(y(o.parts[i],t))}else{var u=[];for(i=0;i<o.parts.length;i++)u.push(y(o.parts[i],t));r[o.id]={id:o.id,refs:1,parts:u}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],u={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(u):n.push(r[i]={id:i,parts:[u]})}return n}function p(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertAt.before,n);n.insertBefore(t,o)}}function d(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return h(t,e.attrs),p(e,t),t}function h(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var l=u++;n=i||(i=m(t)),r=b.bind(null,n,l,!1),o=b.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",h(t,e.attrs),p(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(i),u&&URL.revokeObjectURL(u)}.bind(null,n,t),o=function(){d(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){d(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return s(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var i=n[a];(u=r[i.id]).refs--,o.push(u)}e&&s(f(e,t),t);for(a=0;a<o.length;a++){var u;if(0===(u=o[a]).refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete r[u.id]}}}};var v=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function b(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=v(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,